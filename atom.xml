<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>红X菌のZone</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://m12r3dx.github.io/"/>
  <updated>2019-09-10T17:49:04.058Z</updated>
  <id>https://m12r3dx.github.io/</id>
  
  <author>
    <name>Kong Jerry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《考试脑科学》 X 「学习观」总结</title>
    <link href="https://m12r3dx.github.io/2019/09/10/BrainSci-cross-VOL/"/>
    <id>https://m12r3dx.github.io/2019/09/10/BrainSci-cross-VOL/</id>
    <published>2019-09-10T01:28:03.000Z</published>
    <updated>2019-09-10T17:49:04.058Z</updated>
    
    <content type="html"><![CDATA[<p>我是于建国博士(以下统一用于博士网名：Yjango代称)专栏的忠实读者，</p><p>也是一个对学习感点兴趣的普通人。</p><p>最近在看一本叫做《考试脑科学》([日]池谷裕二，图灵新知)的书，</p><p>看这本书最大的感触就是，很多东西和于博士在学习观讲述的东西都是重叠的，</p><p>于是我决定写点东西，关于两者中我比较感兴趣观点做个总结记录。</p><p>以下观点我会给出相应出处，感兴趣的可以自行去查找。</p><p>当然最重要的，学习最重要的还是三要素：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>不畏失败的毅力</span><br><span class="line"><span class="bullet">2. </span>解决问题的能力</span><br><span class="line"><span class="bullet">3. </span>乐观的性格</span><br><span class="line"></span><br><span class="line">From:《考试脑科学》，5-3 人脑与机器的差异</span><br></pre></td></tr></table></figure><p>YJango观点十分明确，由于学习是典型的“输入-输出”模型，</p><p>优化该模型的方法无非四点：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>从有限例子找出规律 - 方法记忆</span><br><span class="line"><span class="bullet">2. </span>压缩信息来预测未知 - 抽象能力</span><br><span class="line"><span class="bullet">3. </span>明确输入输出 - 费曼方法</span><br><span class="line"><span class="bullet">4. </span>重塑大脑链接 - 强化记忆</span><br></pre></td></tr></table></figure><p>这几点在《考试脑科学》一书中当然有提，甚至很多观念都是重合的，</p><p>这一点倒是没啥可奇怪的，毕竟「学习观」和本书一样是讲述学习的，</p><p>但是关键一点YJango已经指出这是披着「学习观」的皮讲机器学习。</p><p>和真正的人脑，还是有点差距的，毕竟人脑最大的问题是没法扩展，</p><p>遗忘机制在此阻碍了我们进步的同时，其实也是极好的保护机制。（“人脑本身更擅长忘记”， [1-5]）</p><p>在这场进化的竞赛中还是人类狠啊，通过代代相传知识缓慢累积进步，</p><p>这让我想起了哈罗德芬奇的经典论调,如何限制AI成长…</p><p><img src="https://i.loli.net/2019/09/11/DIkel6GEy7tL9zs.png" alt="20190911004305.png"></p><p><img src="https://i.loli.net/2019/09/11/oyNbARnvV6Jam9W.png" alt="20190911004505.png"></p><p>收回来，接着聊书。</p><p>不管是NN还是ANN都是要强调输出结果的，因为任何反馈控制系统都是</p><p>要依赖输出进行调节的。</p><p>人类的做法就是通过考试,机器的做法就是通过检验预测。（本质其实是一样的</p><p>YJango的这个导图其实已经很好解释了学习的运作机制</p><p><img src="https://i.loli.net/2019/09/11/iISK72mFnWk1oOC.png" alt="20190911005430.png"></p><p>那么面对考试我们该如何调整呢。</p><h2 id="首先要问我们究竟考的是什么。"><a href="#首先要问我们究竟考的是什么。" class="headerlink" title="首先要问我们究竟考的是什么。"></a>首先要问我们究竟考的是什么。</h2><p>多数人讨厌在学校学的数学，尤其是非理工科学生，</p><p>认为我学数学有啥用，以后我又用不到；</p><p>是啊，你买个菜又用不到微积分，傅里叶变换，三角函数。</p><p>但是，如果说学数学的目的根本就不是让你学数学，</p><p>而是培养逻辑思维能力呢？</p><p>要知道，原先班上总有几个人做数学笔算出错(例如在下</p><p>这个数学白痴)，总会把锅推给粗心大意/不够熟练。</p><p>但事实并非如此，看看草稿纸就明白了。</p><blockquote><p>越是容易出现笔算错误的人，其笔算过程越是杂乱无章。[脑科学3]</p></blockquote><p>而且我还懒得整理错题。</p><blockquote><p>对知识的整理是学习过程中的一个非常重要的步骤。[脑科学3]</p></blockquote><p>这样能考好才见了鬼了…所以我们来调整应试策略</p><h2 id="如何调整策略"><a href="#如何调整策略" class="headerlink" title="如何调整策略"></a>如何调整策略</h2><h3 id="全时学习策略"><a href="#全时学习策略" class="headerlink" title="全时学习策略"></a>全时学习策略</h3><ol><li>饭前属于与饥饿状态，适合学习</li><li>睡觉前也是学习黄金期</li><li>早饭或晚饭后处于饱腹状态时，不适宜学习，可以看书消遣或者摸鱼</li><li>午后坚持不住就睡，没必要硬撑</li><li>如果午饭时就决定要睡午觉，那就饭后半小时学习一会再睡觉</li></ol><h3 id="最佳复习时间-艾宾浩斯）"><a href="#最佳复习时间-艾宾浩斯）" class="headerlink" title="最佳复习时间(艾宾浩斯）"></a>最佳复习时间(艾宾浩斯）</h3><p>Re 1：学习后第二天<br>Re 2：Re1后一周后<br>Re 3：Re2后两周后<br>Re 4：Re3一个月后</p><h3 id="其他复习策略"><a href="#其他复习策略" class="headerlink" title="其他复习策略"></a>其他复习策略</h3><blockquote><p>刚开始学习某一领域的知识时，可以先忽略细节，<br>最重要的是理解和把握知识的概貌，<br>之后分阶段进行补全。[5-7]</p></blockquote><blockquote><p>步骤分越详细，学习效率越高。[5-4]</p></blockquote><blockquote><p>相对于输入，人脑更重视输出,而“讲述”是最大的输出策略[6-3]</p></blockquote><blockquote><p>死记硬背没有在神经网络形成关联，所以很容易被变得模糊不清[经验谈 14]</p></blockquote><blockquote><p>记忆量大的科目要提前安排复习策略[经验谈 10]</p></blockquote><blockquote><p>相对于输入，人脑更重视输出,而“讲述”是最大的输出策略[6-3]</p></blockquote><blockquote><p>将知识记忆(需要契机，与知识相关)向经验记忆(易于回想，与经验相关)转化<br>需要大量的练习(“人生如同道路，最近的捷径往往是最坏的路”–F.培根,[5-7])<br></p></blockquote><p>大概就这些，<br>And always，DFTBA!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我是于建国博士(以下统一用于博士网名：Yjango代称)专栏的忠实读者，&lt;/p&gt;
&lt;p&gt;也是一个对学习感点兴趣的普通人。&lt;/p&gt;
&lt;p&gt;最近在看一本叫做《考试脑科学》([日]池谷裕二，图灵新知)的书，&lt;/p&gt;
&lt;p&gt;看这本书最大的感触就是，很多东西和于博士在学习观讲述的东西
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何利用WSL(WSL 1)部署开发环境优雅的进行开发</title>
    <link href="https://m12r3dx.github.io/2019/09/09/code-in-WSL/"/>
    <id>https://m12r3dx.github.io/2019/09/09/code-in-WSL/</id>
    <published>2019-09-08T16:59:55.000Z</published>
    <updated>2019-09-08T18:24:46.301Z</updated>
    
    <content type="html"><![CDATA[<p>OS：这次我是真的烦了。</p><p>先谈需求，</p><p>由于所学专业要求放弃Windows几乎是非常不现实的选项</p><p>(多数工业软件如博图是要跑在Win上的，还有CAD)，</p><p>但在Windows机器上部署CUDA和深度学习框架</p><p>需要依赖于VS(至少是Build组件)，</p><p>虚拟机即开即用但是太占地方(不够轻量化),</p><p>而Win对Docker的支持像*一样。</p><p>痛定思痛决定tear the system，这次尽量规划的合理点。</p><p>在此之前我手上有三套方案供我选择，</p><ul><li><p>方案一，Windows(主机，装CUDA，Python3.7，gcc，vs-buildtool)+Vargent(VBox)</p></li><li><p>方案二，Manjaro-Xfce(主机，装CUDA，Python3.7)+VBox(Windows 10)</p></li><li><p>方案三，Windows(舍弃CUDA,用Python+gcc)+Vargent(VBox)</p></li></ul><p>都多多少少有些问题。</p><p>Windows做宿主的最大问题是一旦挂掉，<br>重新配置会花掉大量的精力和时间，</p><p>并且鉴于文件系统的复杂性(不同于*nix的直观性)，<br>维护管理文件的时候也很想死。</p><p>Linux的话就很容易自己作炸(Manjaro还好了其实)。</p><p>那天逛少数派发现了一篇文章<a href="https://sspai.com/post/47719" target="_blank" rel="noopener">在 Windows 上用 WSL 开发的操作体验指北</a>，突然来了灵感。</p><p>要不…给WSL一个机会？</p><h2 id="0x00开始迁移"><a href="#0x00开始迁移" class="headerlink" title="0x00开始迁移"></a>0x00开始迁移</h2><p>我是那种挺极端系统玩家，所以主系统在备份了密钥之后，</p><p><img src="https://i.loli.net/2019/09/09/rfgIPbFtiNkAWUT.png" alt="20190909012642.png"></p><p>我就直接把C盘抹了……</p><p>再您妈的见(^-^)</p><p>OS：事实证明不要像我这么冲动，我的WA2三周目存档啊……</p><p>至于开WSL支持啥的这都是废话了，系统我选的Ubuntu 18.04 LTS，非长期不敢用啊。</p><p>在经过简单的安装和配置之后，<br><img src="https://i.loli.net/2019/09/09/UCwhDl9diJ84KTA.png" alt="20190909013820.png"></p><p>这样肯定是没法看的，那就来配置一番。</p><h2 id="0x01搬迁环境"><a href="#0x01搬迁环境" class="headerlink" title="0x01搬迁环境"></a>0x01搬迁环境</h2><p>由于早年血一般的教训使我养成了备份脚本/配置文件的好习惯，</p><p>所以重配环境没费多大力气，多数情况可以参考我的<a href="https://m12r3dx.github.io/2019/04/21/ubuntu-1804/">Ubuntu 18.04 部署手记</a></p><p>所以说同学们啊，不要在不该省力气的地方偷工减料，<br>会遭报应的。</p><p>但是有一点，tmux+vim我还没折腾，因为我发觉之前的对于我来讲有点复杂，所以我准备回头搞个简化版再更新。</p><p>折腾完差不多这样。</p><p><img src="https://i.loli.net/2019/09/09/mjeT8o3QUbgWfIi.png" alt="20190909014719.png"></p><p>注意：如果你需要用windows下查看linux的文件，可以用一下wsl-open</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo npm install -g wsl-open</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">wsl-open ../Downloads/THP.pdf</span><br><span class="line">wsl-open /home/other/README.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开目录(仅限Windows下的目录['/mnt/c/'等])</span></span><br><span class="line">wsl-open /mnt/c/Users/4u6u5/Music</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开链接</span></span><br><span class="line">wsl-open https://mijisou.com</span><br></pre></td></tr></table></figure><h2 id="0x02-VSCode登场"><a href="#0x02-VSCode登场" class="headerlink" title="0x02 VSCode登场"></a>0x02 VSCode登场</h2><p>原先我不愿意搬到VSCode下就是因为配置起来太麻烦，</p><p>但最近微软发布了Remote-WSL插件(估计是为了WSL2)，</p><p>配置效率成倍提升，大大方便我的配置流程。</p><p>我常用的语言是C/C++和Python，js用的不多。</p><p>先安装Python3.7+深度学习那一堆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"></span><br><span class="line">sudo apt install -y make build-essential libssl-dev libffi-dev python3-dev</span><br><span class="line"><span class="comment"># 安装Python3.7</span></span><br><span class="line"></span><br><span class="line">sudo apt install python3.7</span><br><span class="line"><span class="comment"># 安装 pip</span></span><br><span class="line"></span><br><span class="line">sudo apt install python3-pip</span><br><span class="line"><span class="comment"># 升级 pip</span></span><br><span class="line"></span><br><span class="line">sudo python3 -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br><span class="line"><span class="comment"># 修改pip</span></span><br><span class="line"></span><br><span class="line">vim /usr/bin/pip3</span><br><span class="line"></span><br><span class="line">from pip._internal import main </span><br><span class="line">-&gt; from pip._internal import main</span><br><span class="line"><span class="comment"># 修改pip源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装框架</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Pytorch(V1.2.0)</span></span><br><span class="line">sudo pip3 install torch==1.2.0+cpu torchvision==0.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html</span><br><span class="line"></span><br><span class="line"><span class="comment">## tensorflow(V2.0rc)</span></span><br><span class="line">sudo pip3 install tensorflow==2.0.0-beta0 tensorboard</span><br><span class="line"></span><br><span class="line"><span class="comment">## jupyter notebook</span></span><br><span class="line">sudo pip3 install jupyter</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配notebook密码</span></span><br><span class="line">jupyter-notebook password</span><br></pre></td></tr></table></figure><p>安装成功截图如下</p><p><img src="https://i.loli.net/2019/09/09/cvf84ORsaJp6BKL.png" alt="20190909021939.png"></p><p>在要打开的目录中输入<code>code .</code>在WSL里启动主机的VSCode，此时Remote-WSL启动，</p><p>要求你安装pylint和autopep8，安装即可。</p><p>C++</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OS：这次我是真的烦了。&lt;/p&gt;
&lt;p&gt;先谈需求，&lt;/p&gt;
&lt;p&gt;由于所学专业要求放弃Windows几乎是非常不现实的选项&lt;/p&gt;
&lt;p&gt;(多数工业软件如博图是要跑在Win上的，还有CAD)，&lt;/p&gt;
&lt;p&gt;但在Windows机器上部署CUDA和深度学习框架&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>终端美化指南</title>
    <link href="https://m12r3dx.github.io/2019/05/17/term-final/"/>
    <id>https://m12r3dx.github.io/2019/05/17/term-final/</id>
    <published>2019-05-17T09:11:34.000Z</published>
    <updated>2019-05-17T09:24:42.654Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始用tmux，越用越上瘾。<br>正好简单整理一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近开始用tmux，越用越上瘾。&lt;br&gt;正好简单整理一下。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="config" scheme="https://m12r3dx.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>如何用你的vscode高(kai)效(xin)工(mo)作(yu)</title>
    <link href="https://m12r3dx.github.io/2019/05/03/vscode666/"/>
    <id>https://m12r3dx.github.io/2019/05/03/vscode666/</id>
    <published>2019-05-03T15:20:33.000Z</published>
    <updated>2019-09-08T12:23:28.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL,DR;"></a>TL,DR;</h2><hr><p>本篇介绍了以下插件</p><ul><li>一键上传图传工具 - PicGo</li><li>基于Webview和ffmpeg实现的第三方基佬云播放器 - VSC Netease Music</li><li>支持国内国际切换的leetcode刷题工具 -LeetCode</li><li>可能是最方便的pdf阅读器 - vscode-pdf</li><li>特别福利 - 蔡徐坤鼓励师 [额错咧别打额ε=ε=ε=┏(゜ロ゜;)┛]</li></ul><h2 id="写博客的好助手-PicGo"><a href="#写博客的好助手-PicGo" class="headerlink" title="写博客的好助手 - PicGo"></a>写博客的好助手 - PicGo</h2><p>图床折腾来折腾去想死吗小哥哥,<br>解释步骤时候插入图片贼多,一个个截图,保存,上传.<br>恭喜你,救星来了.<br>向各位介绍船新工具 - PicGo vscode插件!<br>用起来贼简单<br>分为三种方式</p><table><thead><tr><th style="text-align:center">OS</th><th style="text-align:center">从剪切板上传</th><th style="text-align:center">从文件上传</th><th style="text-align:center">输入路径上传</th></tr></thead><tbody><tr><td style="text-align:center">Windows/*nix</td><td style="text-align:center"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>U</kbd></td><td style="text-align:center"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>E</kbd></td><td style="text-align:center"><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>O</kbd></td></tr><tr><td style="text-align:center">Mac</td><td style="text-align:center"><kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>U</kbd></td><td style="text-align:center"><kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>E</kbd></td><td style="text-align:center"><kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>O</kbd></td></tr></tbody></table><p>从剪贴板上传太方便了,Snipaste截图配合,<br>效率成倍提升,<br>而且支持多家的图床,<br>不想用默认的”sm.ms”?<br>切换了就完事了.</p><h2 id="网易云音乐插件-VSC-Netease-Music"><a href="#网易云音乐插件-VSC-Netease-Music" class="headerlink" title="网易云音乐插件 - VSC Netease Music"></a>网易云音乐插件 - VSC Netease Music</h2><p>Ctrl+Shift+P 输入启动</p><p><img src="https://i.loli.net/2019/05/03/5ccc62d87f3a1.png" alt="20190503234840.png"></p><p>弹出窗口标签后点一下,显示如下<br><img src="https://i.loli.net/2019/05/04/5ccc658a4d1e4.png" alt="20190504000009.png"><br>就可以开始使用啦.</p><p><img src="https://i.loli.net/2019/05/04/5ccc65f531fe1.png" alt="20190504000155.png"></p><p>手机号登陆后,还可以播放个人收藏歌单.</p><p>热键</p><table><thead><tr><th>Command</th><th>Key</th></tr></thead><tbody><tr><td>静音 / 恢复</td><td><kbd>Alt</kbd>+<kbd>M</kbd></td></tr><tr><td>上一首</td><td><kbd>Alt</kbd>+<kbd>,</kbd></td></tr><tr><td>下一首</td><td><kbd>Alt</kbd>+<kbd>.</kbd></td></tr><tr><td>播放 / 暂停</td><td><kbd>Alt</kbd>+<kbd>/</kbd></td></tr></tbody></table><p><img src="https://i.loli.net/2019/05/04/5ccc67421100b.png" alt="20190504000729.png"></p><h2 id="LeetCode-插件"><a href="#LeetCode-插件" class="headerlink" title="LeetCode 插件"></a>LeetCode 插件</h2><p>需要Node.js支持</p><p>可切换海外/国内版</p><p><img src="https://i.loli.net/2019/05/04/5ccc67ee4c81f.png" alt="20190504001022.png"></p><p>也能搜索题目,切换常用语言.</p><p><img src="https://i.loli.net/2019/05/04/5ccc683d8ed05.png" alt="20190504001141.png"></p><p><img src="https://i.loli.net/2019/05/04/5ccc68871ec6a.png" alt="20190504001254.png"></p><p>可以说很方便了</p><p><img src="https://i.loli.net/2019/05/04/5ccc68c64edf6.png" alt="20190504001357.png"></p><p>可以测试,提交,也可以保存到本地</p><h2 id="vscode-pdf"><a href="#vscode-pdf" class="headerlink" title="vscode-pdf"></a>vscode-pdf</h2><p>目录里的pdf右键View PDF<br><img src="https://i.loli.net/2019/05/04/5ccc6a9c9f014.png" alt="20190504002145.png"></p><h2 id="坤坤鼓励师"><a href="#坤坤鼓励师" class="headerlink" title="坤坤鼓励师"></a>坤坤鼓励师</h2><p>你写代码的样子真像cxk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*^_^*)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/05/04/5ccc6b2c237e3.png" alt="20190504002410.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL,DR;&quot;&gt;&lt;/a&gt;TL,DR;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;本篇介绍了以下插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一键上传图传工具 - PicGo&lt;/li&gt;
&lt;li&gt;基于
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 部署手记</title>
    <link href="https://m12r3dx.github.io/2019/04/21/ubuntu-1804/"/>
    <id>https://m12r3dx.github.io/2019/04/21/ubuntu-1804/</id>
    <published>2019-04-21T13:04:18.000Z</published>
    <updated>2019-05-17T09:24:42.656Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>犹豫,就会败北.jpg</strong></p></blockquote><p>因为做某个Pwn题，Kali存在一系列问题，再加上退役予定，果然还是换了虚拟机的Kali，</p><p>Ubuntu Yes！</p><h2 id="0x00-TL-DR"><a href="#0x00-TL-DR" class="headerlink" title="0x00 TL;DR"></a>0x00 TL;DR</h2><ol><li>VMware Workstation Pro 15的Vmtools在Ubuntu18.04下存在问题，耻辱换回14。<br>(我的正版序列号白给了～RUA!)</li><li>使用联通网的同学在使用ptf安装渗透测试所需工具的时候，请自觉扶墙。</li><li>18.04作为一个LTS版本Node.js竟然还是8… SDK还是跟着最新版本走吧。</li><li>本文最后会总结一波部署脚本，感兴趣的同学可以康康。</li></ol><h2 id="0x01-安装系统"><a href="#0x01-安装系统" class="headerlink" title="0x01  安装系统"></a>0x01  安装系统</h2><p>基础备份工作不表。<br>作为xfce4忠实用户，直接下了Xubuntu镜像，然后就是愉快的装装装(系统自己装，<br>我吃零食看番)环节，重启之后就是熟悉的界面，先快照一波，然后安装Vmtools,<br>精(bai)彩(gei)的部分来了，</p><p>用VM自带的就没法全屏下自动缩放，<br>用apt里的开源版本，剪贴板和共享文件夹那就白给了。</p><p>我：“excuse me？(╯‵□′)╯︵┻━┻ .”</p><p>屈服是不可能屈服的，<br>这辈子不可能屈服的。</p><p>404娘启动！</p><p>最终方案大概长这样：</p><ol><li>先安装VMware给的镜像里带的Vmtools</li><li>然后再sudo apt install open-vm-tools-desktop</li></ol><p>然后你就发现…狗日的18.04内核崩溃…<br>关键是我的Usb外置网卡挂进去，虚拟机就炸了…</p><p>尼马…凸(艹皿艹 )</p><p>在跟无数友人交流(不是PY！)之后，得出结论，<br>VM15还是先别着急用了…</p><p>然后果断重做。</p><p>这次就好多了，完成上述步骤后就开始配置工作环境了。</p><h2 id="0x02-工具流配置"><a href="#0x02-工具流配置" class="headerlink" title="0x02 工具流配置"></a>0x02 工具流配置</h2><p>先换源<br>不过Ubuntu挺好，有设置(设置-软件和更新)<br>直接换成中科大/清华了事。</p><p>基本工具流如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">terminator + vim</span><br><span class="line">vs codium (vscode开源编译版本)</span><br><span class="line">Firefox Quantum + 一堆插件</span><br><span class="line">s*r (和谐成这样估计你们也知道是啥)</span><br><span class="line">albert launcher(堪比Mac OS下的Alfred的存在)</span><br></pre></td></tr></table></figure><p>估计有人要问，你都有vs code你还要啥vim…<br>问题是有时候我就不想进图形界面，你咬我啊。(略略略…)</p><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#build-esstional</span></span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line"><span class="comment">#install albert</span></span><br><span class="line">sudo sh -c <span class="string">"echo 'deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_18.04/ /' &gt; /etc/apt/sources.list.d/home:manuelschneid3r.list"</span></span><br><span class="line">wget -nv https://download.opensuse.org/repositories/home:manuelschneid3r/xUbuntu_18.04/Release.key -O Release.key</span><br><span class="line">sudo apt-key add - &lt; Release.key</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install albert</span><br><span class="line"><span class="comment">#install vs codium</span></span><br><span class="line">wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/repos/debs/ vscodium main'</span> | sudo tee --append /etc/apt/sources.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install vscodium</span><br><span class="line"><span class="comment">#install s*r</span></span><br><span class="line">wget http://www.djangoz.com/ssr</span><br><span class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 766 /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">ssr install</span><br></pre></td></tr></table></figure><p>这时有一位帅气的同学突然警觉！</p><blockquote><p>“你丫的Vim呢…”</p></blockquote><p>事实是这样的…<br>我博客里其实有一篇了<br>传送门在此：<br>[速成课:Vim简明指南]<a href="https://m12r3dx.github.io/2018/11/12/vim/">https://m12r3dx.github.io/2018/11/12/vim/</a></p><p>想抄我.vimrc的同学随便抄好吧。<br>这里专门拿出来讲讲一些坑，<br>第一,各位同学最好不要apt带的，因为可能不带Python支持，而在装YouCompeleteMe插件<br>时踩坑，最好自己编译一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:vim/vim.git</span><br><span class="line"><span class="built_in">cd</span> vim/</span><br><span class="line">./configure --with-features=huge --<span class="built_in">enable</span>-pythoninterp --<span class="built_in">enable</span>-rubyinterp --<span class="built_in">enable</span>-luainterp --<span class="built_in">enable</span>-perlinterp --with-python-config-dir=/usr/lib/python2.7/config/ --<span class="built_in">enable</span>-gui=gtk2 --<span class="built_in">enable</span>-cscope --prefix=/usr</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>注意：编译前最好安装一下依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-devel python3-devel ruby-devel </span><br><span class="line">lua-devel libX11-devel gtk-devel gtk2-devel gtk3-devel</span><br><span class="line">ncurses-devel</span><br></pre></td></tr></table></figure><p>这样完事以后，进vim执行一下:echo has(‘python’)<br>返回为1就是支持Python啦。</p><p>第二，就是众所周知的vim插件安装，回回重装像噩梦，<br>有能力的同学能扶墙就扶吧，谁还跟时间过不去呢。<br>是吧。<br>所有插件其实是通过管理器实现，所以先来装管理器，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure></p><p>因为我已经把需要安装的插件列表写在.vimrc里了，<br>现在只需要打开vim，执行一下:PluginInstall就好，但这里面有个奇葩，<br>对就是那个YouComleteMe。<br>因为它安完是没法直接用的，所以你安好了之后他会报错，这种时候你就退出来，<br>然后进~/.vim/bundle/YouCompleteMe/重编译一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh  --clang-completer</span><br></pre></td></tr></table></figure></p><p>这时候还会提示你缺少第三方库，按照指示做就完了。<br>详情请参考这篇文章：<br><a href="https://blog.csdn.net/lyh__521/article/details/46295775" target="_blank" rel="noopener">YouCompleteMe实现vim自动补全</a></p><p>人家写的挺好，我就不画蛇添足了…(自闭loading…30%)</p><h2 id="0x03-开发环境配置"><a href="#0x03-开发环境配置" class="headerlink" title="0x03 开发环境配置"></a>0x03 开发环境配置</h2><p>开始捣鼓各种SDK，<br>其实也用的不多，毕竟就是个虚拟机，像回事就完了呗，要啥自行车啊～<br>大概也就装个JDK，node.js,再升级一下Python就完了，有c++17需求的同学<br>可以折腾一下llvm/clang，我先凑合和用gcc就完事了∠( ᐛ 」∠)＿</p><p>先搞nodejs，毕竟我懒，官方部署脚本走起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh</span><br><span class="line">nano nodesource_setup.sh</span><br><span class="line">chmod 755 nodesource_setup.sh</span><br><span class="line">sudo ./nodesource_setup.sh</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p><p>他这个脚本是先添加PPA然后直接用apt更新，可以说很友好了。<br>相比之下，JDK就”#$*@”了…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz</span><br><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz</span><br><span class="line">cp -r sudo mv jdk1.8.0_171 /usr/local/jdk1.8</span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=.:$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>好了，放平心态，这时候你会发现，<br>该升级pip了，<br>你说：”这我会啊，sudo pip install -U pip就完了;<br>当你再次输入pip list时候…<br>“我去，又报错了…”<br>不要慌，打开你的vim /usr/bin/pip(pip3)<br>然后吧第九行<code>from pip import main</code>换成<br><code>from pip._internal import main</code><br>万事大吉。<br>(OS:这帮人怎么搞的，换了api都不带自己改的么，有没有排面)<br>(自闭Loading…50%)</p><h2 id="0x04常用安全工具安装"><a href="#0x04常用安全工具安装" class="headerlink" title="0x04常用安全工具安装"></a>0x04常用安全工具安装</h2><p>这时候有人要推荐著名坑货Katoolin了，<br>我还就不这么干，<br>在著名的黑客秘笈(The Hacker Playbook)第三版中介绍了PTF框架，<br>说白了就是个安装和升级脚本集合(让我想到Windows下的PentestBox），<br>我的配置大概如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br><span class="line">git clone https://github.com/trustedsec/ptf /opt/ptf</span><br><span class="line">cd /opt/ptf &amp;&amp; ./ptf</span><br><span class="line">use modules/exploitation/install_update_all</span><br><span class="line">use modules/intelligence-gathering/install_update_all</span><br><span class="line">use modules/post-exploitation/install_update_all</span><br><span class="line">use modules/powershell/install_update_all</span><br><span class="line">use modules/vulnerability-analysis/install_update_all</span><br></pre></td></tr></table></figure></p><p>密码破解工具可以直接用系统里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install john hydra cupp hashcat</span><br></pre></td></tr></table></figure></p><p>然后就是Pwn环境搭建<br>之前为了省事情，就直接在别人基础上稍作修改。<br>感谢giantbranch同学的<a href="https://github.com/giantbranch/pwn-env-init" target="_blank" rel="noopener">脚本</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line"><span class="comment"># change sourse to ustc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I suggest you modify the /etc/apt/sources.list file to speed up the download."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Press Enter to continue~"</span></span><br><span class="line"><span class="built_in">read</span> <span class="built_in">test</span></span><br><span class="line"><span class="comment">#sudo  sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list</span></span><br><span class="line"><span class="comment"># change sourse —— deb-src </span></span><br><span class="line">sudo sed -i <span class="string">'s/# deb-src/deb-src/'</span> <span class="string">"/etc/apt/sources.list"</span></span><br><span class="line"><span class="comment"># change pip source</span></span><br><span class="line">mkdir ~/.pip</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"[global]\nindex-url = https://pypi.douban.com/simple/\n[install]\ntrusted-host = pypi.douban.com"</span> &gt;  ~/.pip/pip.conf</span><br><span class="line"><span class="comment"># support 32 bit</span></span><br><span class="line">dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># sudo apt-get -y install lib32z1</span></span><br><span class="line">sudo apt-get -y install libc6-i386</span><br><span class="line"><span class="comment"># maybe git？</span></span><br><span class="line">sudo apt-get -y install git gdb</span><br><span class="line"><span class="comment"># install pwndbg</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg ~/.pwndbg </span><br><span class="line"><span class="built_in">cd</span> ~/.pwndbg</span><br><span class="line">./setup.sh</span><br><span class="line"><span class="comment"># install peda</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/.peda</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source ~/.peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br><span class="line"><span class="comment"># download the libc source to current directory(you can use gdb with this example command: directory ~/glibc-2.24/malloc/)</span></span><br><span class="line">sudo apt-get <span class="built_in">source</span> libc6-dev</span><br><span class="line"><span class="comment"># install pwntools</span></span><br><span class="line">sudo apt-get -y install python python-pip</span><br><span class="line">pip install pwntools</span><br><span class="line"><span class="comment"># install one_gadget</span></span><br><span class="line">sudo apt-get -y install ruby</span><br><span class="line">sudo gem install one_gadget</span><br><span class="line"><span class="comment"># download </span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/niklasb/libc-database.git ~/.libc-database</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Do you want to download libc-database now(Y/n)?"</span></span><br><span class="line"><span class="built_in">read</span> input</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$input</span> = <span class="string">"n"</span> ]] || [[ <span class="variable">$input</span> = <span class="string">"N"</span> ]]; <span class="keyword">then</span></span><br><span class="line">true<span class="built_in">echo</span> <span class="string">"you can cd ~/.libc-database and run ./get to download the libc at anytime you want"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">true<span class="built_in">cd</span> ~/.libc-database &amp;&amp; ./get</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"========================================="</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"==========Have fun,and PWN IT.==========="</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"========================================="</span></span><br></pre></td></tr></table></figure><h2 id="0x05-番外：美化"><a href="#0x05-番外：美化" class="headerlink" title="0x05 番外：美化"></a>0x05 番外：美化</h2><p>zsh是个好东西啊，秀一下我的配置吧。<br>当然是假的，其实我就做了两行改动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;philips&quot;</span><br><span class="line">plugins=(git z extract)</span><br></pre></td></tr></table></figure></p><p>主题和实验楼的是一样的，毕竟习惯了<br>插件就是git z(跳转) extract(功能强大的解压插件，所有类型的文件解压一个命令x全搞定)</p><p>然后主题使用的是Manjaro的默认Arc，<br>直接<code>sudo apt install arc-theme</code>就完事了。</p><p>大概就是这个样子了。</p><hr><p>OS：(再也不瞎搞了.jpg)<br>lei了lei了.<br>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;犹豫,就会败北.jpg&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为做某个Pwn题，Kali存在一系列问题，再加上退役予定，果然还是换了虚拟机的Kali，&lt;/p&gt;
&lt;p&gt;Ubuntu Yes！&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>速成课：linux漫游指南</title>
    <link href="https://m12r3dx.github.io/2019/03/29/linux/"/>
    <id>https://m12r3dx.github.io/2019/03/29/linux/</id>
    <published>2019-03-28T16:58:28.000Z</published>
    <updated>2019-05-17T09:24:42.669Z</updated>
    
    <content type="html"><![CDATA[<p>你并不需要知道所有的这些东西，</p><p>但是如果你还在很沉重地在使用 Linux 的话，这些东西都值得你看一看。 </p><p>注：如果你想知道下面涉及到的命令的更多的用法，你一定要 man 一点。</p><p>对于一些命令，你可以需要先 yum 或 apt-get 来安装一下，如果有什么问题，别忘了 Google。</p><p>如果你要 Baidu 的话，</p><p>我仅代表这个地球上所有的生物包括微生物甚至细菌病毒和小强 BS 你到宇宙毁灭.</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li><p><strong>学习 <a href="http://www.quora.com/Bash-shell" target="_blank" rel="noopener">Bash</a> </strong>。你可以 man bash 来看看 bash 的东西，并不复杂也并不长。你用别的 shell 也行，但是 bash 是很强大的并且也是系统默认的。（学习 zsh 或 tsch 只会让你在很多情况下受到限制）</p></li><li><p><strong>学习 vim</strong> 。在 Linux 下，基本没有什么可与之竞争的编<del>译</del>辑器（就算你是一个 Emacs 或 Eclipse 的重度用户）。你可以看看《<a href="https://m12r3dx.github.io/2018/11/12/vim/" title="简明 Vim 练级攻略">简明 vim 攻略</a>》和 《<a href="https://coolshell.cn/articles/7166.html" title="游戏：VIM大冒险" target="_blank" rel="noopener">Vim 的冒险游戏</a>》以及《<a href="https://coolshell.cn/articles/5479.html" title="给程序员的VIM速查卡" target="_blank" rel="noopener">给程序员的 Vim 速查卡</a>》还有《<a href="https://coolshell.cn/articles/894.html" title="将vim变得简单:如何在vim中得到你最喜爱的IDE特性" target="_blank" rel="noopener">把 Vim 变成一个编程的 IDE</a>》等等。</p></li><li><p><strong>了解 ssh</strong>。明白不需要口令的用户认证（通过 ssh-agent, ssh-add），学会用 ssh 翻墙，用 scp 而不是 ftp 传文件，等等。你知道吗？scp 远端的时候，你可以按 tab 键来查看远端的目录和文件（当然，需要无口令的用户认证），这都是 bash 的功劳。</p></li><li><p><strong>熟悉 bash 的作业管理</strong>，如： &amp;, Ctrl-Z, Ctrl-C, jobs, fg, bg, kill, 等等。当然，你也要知道 Ctrl+\（SIGQUIT）和 Ctrl+C （SIGINT）的区别。</p></li><li><p><strong>简单的文件管理</strong> ： ls 和 ls -l (你最好知道 “ls -l” 的每一列的意思), less, head, tail 和 tail -f, ln 和 ln -s (你知道明白 hard link 和 soft link 的不同和优缺点), chown, chmod, du (如果你想看看磁盘的大小 du -sk *), df, mount。当然，原作者忘了 find 命令。</p></li><li><p><strong>基础的网络管理</strong>： ip 或 ifconfig, dig。当然，原作者还忘了如 netstat, ping, traceroute, 等</p></li><li><p><strong>理解正则表达式</strong>，还有 grep/egrep 的各种选项。比如： -o, -A, 和 -B 这些选项是很值得了解的。</p></li><li><p><strong>学习使用 apt-get 和 yum 来查找和安装软件</strong>（前者的经典分发包是 Ubuntu，后者的经典分发包是 Redhat），我还建议你试着从源码编译安装软件。</p></li></ul><h4 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h4><ul><li><p>在 bash 里，使用 Ctrl-R 而不是上下光标键来查找历史命令。</p></li><li><p>在 bash 里，使用 Ctrl-W 来删除最后一个单词，使用 Ctrl-U 来删除一行。请 man bash 后查找 Readline Key Bindings 一节来看看 bash 的默认热键，比如：Alt-. 把上一次命令的最后一个参数打出来，而 Alt-* 则列出你可以输入的命令。</p></li><li><p>回到上一次的工作目录： cd –  （回到 home 是 cd ~）</p></li><li><p>使用 xargs。这是一个很强大的命令。你可以使用 - L 来限定有多少个命令，也可以用 - P 来指定并行的进程数。如果你不知道你的命令会变成什么样，你可以使用 xargs echo 来看看会是什么样。当然， -I{} 也很好用。示例：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -name \*.py | xargs grep some_function </span><br><span class="line">cat hosts |  xargs  -I&#123;&#125;  ssh  root@&#123;&#125;  hostname</span><br></pre></td></tr></table></figure><ul><li><p>pstree -p 可以帮你显示进程树。（读过耗子叔那篇《<a href="https://coolshell.cn/articles/7965.html" title="一个fork的面试题" target="_blank" rel="noopener">一个 fork 的面试题</a>》的人应该都不陌生）</p></li><li><p>使用 pgrep 和 pkill 来找到或是 kill 某个名字的进程。 (-f 选项很有用).</p></li><li><p>了解可以发给进程的信号。例如：要挂起一个进程，使用 kill -STOP [pid]. 使用 man 7 signal 来查看各种信号，使用 kill -l 来查看数字和信号的对应表</p></li><li><p>使用 nohup 或  disown 如果你要让某个进程运行在后台。</p></li><li><p>使用 netstat -lntp 来看看有侦听在网络某端口的进程。当然，也可以使用 lsof。</p></li><li><p>在 bash 的脚本中，你可以使用 set -x 来 debug 输出。使用 set -e 来当有错误发生的时候 abort 执行。考虑使用 set -o pipefail 来限制错误。还可以使用 trap 来截获信号（如截获 ctrl+c）。</p></li><li><p>在 bash 脚本中，subshells (写在圆括号里的) 是一个很方便的方式来组合一些命令。一个常用的例子是临时地到另一个目录中，例如：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># do something in current dir</span></span><br><span class="line">(<span class="built_in">cd</span> /some/other/dir; other-command)</span><br><span class="line"><span class="comment"># continue in original dir</span></span><br></pre></td></tr></table></figure><ul><li><p>在 bash 中，注意那里有很多的变量展开。如：检查一个变量是否存在: ${name:?error message}。如果一个 bash 的脚本需要一个参数，也许就是这样一个表达式 input_file=${1:?usage: $0 input_file}。一个计算表达式： i=$(( (i + 1) % 5 ))。一个序列： {1..10}。 截断一个字符串： ${var%suffix} 和 ${var#prefix}。 示例： if var=foo.pdf, then echo ${var%.pdf}.txt prints “foo.txt”.</p></li><li><p>通过 &lt;(some command) 可以把某命令当成一个文件。示例：比较一个本地文件和远程文件 /etc/hosts： diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)</p></li><li><p>了解什么叫 “<a href="http://zh.wikipedia.org/wiki/Here%E6%96%87%E6%A1%A3" target="_blank" rel="noopener">here documents</a>” ，就是诸如 cat &lt;&lt;EOF 这样的东西。</p></li><li><p>在 bash 中，使用重定向到标准输出和标准错误。如： some-command &gt;logfile 2&gt;&amp;1。另外，要确认某命令没有把某个打开了的文件句柄重定向给标准输入，最佳实践是加上 “&lt;/dev/null”，把 / dev/null 重定向到标准输入。</p></li><li><p>使用 man ascii 来查看 ASCII 表。</p></li><li><p>在远端的 ssh 会话里，使用 screen 或 dtach 来保存你的会话。（参看《<a href="https://coolshell.cn/articles/7829.html" title="28个Unix/Linux的命令行神器" target="_blank" rel="noopener">28 个 Unix/Linux 的命令行神器</a>》）</p></li><li><p>要来 debug Web，试试 curl 和 curl -I 或是 wget 。我觉得 debug Web 的利器是 firebug，curl 和 wget 是用来抓网页的，呵呵。</p></li><li><p>把 HTML 转成文本： lynx -dump -stdin</p></li><li><p>如果你要处理 XML，使用 xmlstarlet</p></li><li><p>对于 Amazon S3， s3cmd 是一个很方便的命令（还有点不成熟）</p></li><li><p>在 ssh 中，知道怎么来使用 ssh 隧道。通过 -L or -D (还有 - R) ，翻墙神器。</p></li><li><p>你还可以对你的 ssh 做点优化。比如，.ssh/config 包含着一些配置：避免链接被丢弃，链接新的 host 时不需要确认，转发认证，以前使用压缩（如果你要使用 scp 传文件）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TCPKeepAlive=yes</span><br><span class="line">ServerAliveInterval=15</span><br><span class="line">ServerAliveCountMax=6</span><br><span class="line">StrictHostKeyChecking=no</span><br><span class="line">Compression=yes</span><br><span class="line">ForwardAgent=yes</span><br></pre></td></tr></table></figure></li><li><p>如果你有输了个命令行，但是你改变注意了，但你又不想删除它，因为你要在历史命令中找到它，但你也不想执行它。那么，你可以按下 Alt-# ，于是这个命令关就被加了一个 #字符，于是就被注释掉了。</p></li></ul><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><ul><li><p>了解 sort 和 uniq 命令 (包括 uniq 的 -u 和 -d 选项).</p></li><li><p>了解用 cut, paste, 和 join 命令来操作文本文件。很多人忘了在 cut 前使用 join。</p></li><li><p>如果你知道怎么用 sort/uniq 来做集合交集、并集、差集能很大地促进你的工作效率。假设有两个文本文件 a 和 b 已解被 uniq 了，那么，用 sort/uniq 会是最快的方式，无论这两个文件有多大（sort 不会被内存所限，你甚至可以使用 - T 选项，如果你的 / tmp 目录很小）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat a b | sort | uniq &gt; c   <span class="comment"># c is a union b 并集</span></span><br><span class="line"> </span><br><span class="line">cat a b | sort | uniq -d &gt; c   <span class="comment"># c is a intersect b 交集</span></span><br><span class="line"> </span><br><span class="line">cat a b b | sort | uniq -u &gt; c   <span class="comment"># c is set difference a - b 差集</span></span><br></pre></td></tr></table></figure></li><li><p>了解和字符集相关的命令行工具，包括排序和性能。很多的 Linux 安装程序都会设置 LANG 或是其它和字符集相关的环境变量。这些东西可能会让一些命令（如：sort）的执行性能慢 N 多倍（注：就算是你用 UTF-8 编码文本文件，你也可以很安全地使用 ASCII 来对其排序）。如果你想 Disable 那个 i18n 并使用传统的基于 byte 的排序方法，那就设置 export LC_ALL=C （实际上，你可以把其放在 .bashrc）。如果这设置这个变量，你的 sort 命令很有可能会是错的。</p></li><li><p>了解 awk 和 sed，并用他们来做一些简单的数据修改操作。例如：求第三列的数字之和： awk ‘{x += $3} END { print x }’。这可能会比 Python 快 3 倍，并比 Python 的代码少三倍。</p></li><li><p>使用 shuf 来打乱一个文件中的行或是选择文件中一个随机的行。</p></li><li><p>了解 sort 命令的选项。了解 key 是什么（-t 和 - k）。具体说来，你可以使用 - k1,1 来对第一列排序，-k1 来对全行排序。</p></li><li><p>Stable sort (sort -s) 会很有用。例如：如果你要想对两例排序，先是以第二列，然后再以第一列，那么你可以这样： sort -k1,1 | sort -s -k2,2</p></li><li><p>我们知道，在 bash 命令行下，Tab 键是用来做目录文件自动完成的事的。但是如果你想输入一个 Tab 字符（比如：你想在 sort -t 选项后输入 <tab> 字符），你可以先按 Ctrl-V，然后再按 Tab 键，就可以输入 &lt; tab &gt; 字符了。当然，你也可以使用 $’\t’。</tab></p></li><li><p>如果你想查看二进制文件，你可以使用 hd 命令（在 CentOS 下是 hexdump 命令），如果你想编译二进制文件，你可以使用 bvi 命令（<a href="http://bvi.sourceforge.net/" target="_blank" rel="noopener">http://bvi.sourceforge.net/</a> 墙）</p></li><li><p>另外，对于二进制文件，你可以使用 strings（配合 grep 等）来查看二进制中的文本。</p></li><li><p>对于文本文件转码，你可以试一下 iconv。或是试试更强的 uconv 命令（这个命令支持更高级的 Unicode 编码）</p></li><li><p>如果你要分隔一个大文件，你可以使用 split 命令（split by size）和 csplit 命令（split by a pattern）。</p></li></ul><h4 id="系统调试"><a href="#系统调试" class="headerlink" title="系统调试"></a>系统调试</h4><ul><li><p>如果你想知道磁盘、CPU、或网络状态，你可以使用 iostat, netstat, top (或更好的 htop), 还有 dstat 命令。你可以很快地知道你的系统发生了什么事。关于这方面的命令，还有 iftop, iotop 等（参看《<a href="https://coolshell.cn/articles/7829.html" title="28个Unix/Linux的命令行神器" target="_blank" rel="noopener">28 个 Unix/Linux 的命令行神器</a>》）</p></li><li><p>要了解内存的状态，你可以使用 free 和 vmstat 命令。具体来说，你需要注意 “cached” 的值，这个值是 Linux 内核占用的内存。还有 free 的值。</p></li><li><p>Java 系统监控有一个小的技巧是，你可以使用 kill -3 <pid> 发一个 SIGQUIT 的信号给 JVM，可以把堆栈信息（包括垃圾回收的信息）dump 到 stderr/logs。</pid></p></li><li><p>使用 mtr 会比使用 traceroute 要更容易定位一个网络问题。</p></li><li><p>如果你要找到哪个 socket 或进程在使用网络带宽，你可以使用 iftop 或 nethogs。</p></li><li><p>Apache 的一个叫 ab 的工具是一个很有用的，用 quick-and-dirty 的方式来测试网站服务器的性能负载的工作。如果你需要更为复杂的测试，你可以试试 siege。</p></li><li><p>如果你要抓网络包的话，试试 wireshark 或 tshark。</p></li><li><p>了解 strace 和 ltrace。这两个命令可以让你查看进程的系统调用，这有助于你分析进程的 hang 在哪了，怎么 crash 和 failed 的。你还可以用其来做性能 profile，使用 -c 选项，你可以使用 - p 选项来 attach 上任意一个进程。</p></li><li><p>了解用 ldd 命令来检查相关的动态链接库。注意：<a href="https://coolshell.cn/articles/1626.html" title="ldd 的一个安全问题" target="_blank" rel="noopener">ldd 的安全问题</a></p></li><li><p>使用 gdb 来调试一个正在运行的进程或分析 core dump 文件。参看耗子叔写的《<a href="https://coolshell.cn/articles/3643.html" title="GDB中应该知道的几个调试方法" target="_blank" rel="noopener">GDB 中应该知道的几个调试方法</a>》</p></li><li><p>学会到 /proc 目录中查看信息。这是一个 Linux 内核运行时记录的整个操作系统的运行统计和信息，比如： /proc/cpuinfo, /proc/xxx/cwd, /proc/xxx/exe, /proc/xxx/fd/, /proc/xxx/smaps.</p></li><li><p>如果你调试某个东西为什么出错时，sar 命令会有用。它可以让你看看 CPU, 内存, 网络, 等的统计信息。</p></li><li><p>使用 dmesg 来查看一些硬件或驱动程序的信息或问题。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你并不需要知道所有的这些东西，&lt;/p&gt;
&lt;p&gt;但是如果你还在很沉重地在使用 Linux 的话，这些东西都值得你看一看。 &lt;/p&gt;
&lt;p&gt;注：如果你想知道下面涉及到的命令的更多的用法，你一定要 man 一点。&lt;/p&gt;
&lt;p&gt;对于一些命令，你可以需要先 yum 或 apt-ge
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>配置VsCode在Windows下使用C/C++</title>
    <link href="https://m12r3dx.github.io/2019/03/28/vscode-cpp-config/"/>
    <id>https://m12r3dx.github.io/2019/03/28/vscode-cpp-config/</id>
    <published>2019-03-28T14:09:18.000Z</published>
    <updated>2019-05-17T09:24:42.683Z</updated>
    
    <content type="html"><![CDATA[<p>好久不写了，正好重做生产环境，在这里记录一笔。</p><p>装MinGw啥的我就不废话了， </p><p>这个实在不会就百度就完事了。 </p><p>我用的是TDM-GCC的安装包，省事。</p><h4 id="TIPS：想用C-17之后的看这里"><a href="#TIPS：想用C-17之后的看这里" class="headerlink" title="TIPS：想用C++17之后的看这里"></a>TIPS：想用C++17之后的看这里</h4><p>在这里下载MinGW-w64<br><a href="https://nchc.dl.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/sjlj/x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0.7z" target="_blank" rel="noopener">MinGW-w64-x86_64-8.1.0-release-posix-sjlj</a><br>下载好后解压到个地方，注意不要有中文路径，<br>例如”D:\Software\GCC\”,<br>然后，将gcc下的bin路径加到环境变量里<br>就像这样<br><img src="https://i.loli.net/2019/05/03/5ccc588d1af04.png" alt="20190503230443.png"><br>打开命令提示符看看。<br><img src="https://i.loli.net/2019/05/03/5ccc58f38c71f.png" alt="20190503230626.png"><br>这样就可以了。</p><p>现在进入正题。</p><p>重点还是配置这几个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c_cpp_properties.json</span><br><span class="line">launch.json</span><br><span class="line">tasks.json</span><br><span class="line">settings.json</span><br></pre></td></tr></table></figure><p>这几个文件位于工作目录的.vscode文件夹里</p><p>没有的话运行一下就有了</p><p>首先是c_cpp_properties.json，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//将&apos;D:/Software/GCC/&apos;替换为安装目录即可</span><br><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Win32&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;clang-x64&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">                &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++&quot;,</span><br><span class="line">                &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/x86_64-w64-mingw32&quot;,</span><br><span class="line">                &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/backward&quot;,</span><br><span class="line">                &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include&quot;,</span><br><span class="line">                &quot;D:/Software/GCC/x86_64-w64-mingw32/include&quot;,</span><br><span class="line">                &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include-fixed&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [</span><br><span class="line">                &quot;_DEBUG&quot;,</span><br><span class="line">                &quot;UNICODE&quot;,</span><br><span class="line">                &quot;__GNUC__=7&quot;,</span><br><span class="line">                &quot;__cdecl=__attribute__((__cdecl__))&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;browse&quot;: &#123;</span><br><span class="line">                &quot;path&quot;: [</span><br><span class="line">                    &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">                    &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++&quot;,</span><br><span class="line">                    &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/x86_64-w64-mingw32&quot;,</span><br><span class="line">                    &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include/c++/backward&quot;,</span><br><span class="line">                    &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include&quot;,</span><br><span class="line">                    &quot;D:/Software/GCC/x86_64-w64-mingw32/include&quot;,</span><br><span class="line">                    &quot;D:/Software/GCC/lib/gcc/x86_64-w64-mingw32/5.1.0/include-fixed&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;limitSymbolsToIncludedHeaders&quot;: true,</span><br><span class="line">            &quot;databaseFilename&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>settings.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;window.zoomLevel&quot;: 0,</span><br><span class="line">    &quot;files.autoGuessEncoding&quot;: true,</span><br><span class="line"></span><br><span class="line">    &quot;editor.snippetSuggestions&quot;: &quot;top&quot;,</span><br><span class="line">    &quot;editor.minimap.enabled&quot;: true,</span><br><span class="line">    &quot;editor.minimap.renderCharacters&quot;: false,</span><br><span class="line">    &quot;editor.formatOnPaste&quot;: true,</span><br><span class="line">    &quot;editor.formatOnType&quot;: true,</span><br><span class="line">    &quot;editor.wordWrap&quot;: &quot;on&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;C_Cpp.clang_format_sortIncludes&quot;: true,</span><br><span class="line">    &quot;[cpp]&quot;: &#123;</span><br><span class="line">        &quot;editor.quickSuggestions&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;[c]&quot;: &#123;</span><br><span class="line">        &quot;editor.quickSuggestions&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;problems.decorations.enabled&quot;: true,</span><br><span class="line">    &quot;C_Cpp.intelliSenseEngineFallback&quot;: &quot;Enabled&quot;,</span><br><span class="line">    &quot;files.associations&quot;: &#123;</span><br><span class="line">        &quot;*.cfg&quot;: &quot;ini&quot;,</span><br><span class="line">        &quot;*.fsh&quot;: &quot;glsl&quot;,</span><br><span class="line">        &quot;stack&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;iostream&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;ostream&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;*.tcc&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;cctype&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;clocale&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;cmath&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;cstdint&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;cstdio&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;cstdlib&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;cwchar&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;cwctype&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;exception&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;initializer_list&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;iosfwd&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;istream&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;limits&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;new&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;stdexcept&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;streambuf&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;system_error&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;type_traits&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;typeinfo&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;utility&quot;: &quot;cpp&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;terminal.integrated.fontSize&quot;: 18, //终端字体大小</span><br><span class="line">    &quot;editor.fontSize&quot;: 20,//编辑器字体大小</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>task.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;Compile&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;g++&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;-pthread&quot;,</span><br><span class="line">                &quot;--std=c++17&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,       </span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">                &quot;-ggdb3&quot;, // 生成和调试有关的信息</span><br><span class="line">                &quot;-Wall&quot;, // 开启额外警告</span><br><span class="line">                &quot;-static-libgcc&quot;, // 静态链接</span><br><span class="line">                &quot;-Wno-format&quot;,</span><br><span class="line">                &quot;-fexec-charset=GBK&quot;, //Console窗体输出字符编码 保证能正常显示中文</span><br><span class="line">                &quot;-finput-charset=UTF-8&quot; //输入编译器文本编码 默认为UTF-8</span><br><span class="line">            ],</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;presentation&quot;: &#123;</span><br><span class="line">                &quot;echo&quot;: true,</span><br><span class="line">                &quot;reveal&quot;: &quot;always&quot;, // 在“终端”中显示编译信息的策略，可以为always，silent，never</span><br><span class="line">                &quot;focus&quot;: false,</span><br><span class="line">                &quot;panel&quot;: &quot;shared&quot; // 不同的文件的编译信息共享一个终端面板</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: &#123;</span><br><span class="line">                &quot;owner&quot;: &quot;cpp&quot;,</span><br><span class="line">                &quot;fileLocation&quot;: [</span><br><span class="line">                    &quot;relative&quot;,</span><br><span class="line">                    &quot;\\&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;pattern&quot;: &#123;</span><br><span class="line">                    &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,</span><br><span class="line">                    &quot;file&quot;: 1,</span><br><span class="line">                    &quot;line&quot;: 2,</span><br><span class="line">                    &quot;column&quot;: 3,</span><br><span class="line">                    &quot;severity&quot;: 4,</span><br><span class="line">                    &quot;message&quot;: 5</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后是启动脚本launch.json，说实话这个最头疼，因为按官方配置的话是一运行闪退，</p><p>我又不想加system(“PAUSE”),最后和Notepad++一样，改了cmd命令(笑)</p><p>脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;GDB&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppvsdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;cmd&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;/C&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">                &quot;&amp;&quot;,</span><br><span class="line">                &quot;pause&quot; //这样就可以出现&quot;请按任意键继续. . .&quot;了</span><br><span class="line">            ],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;D:/Software/GCC/bin/gdb.exe&quot;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: false,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &quot;preLaunchTask&quot;: &quot;Compile&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久不写了，正好重做生产环境，在这里记录一笔。&lt;/p&gt;
&lt;p&gt;装MinGw啥的我就不废话了， &lt;/p&gt;
&lt;p&gt;这个实在不会就百度就完事了。 &lt;/p&gt;
&lt;p&gt;我用的是TDM-GCC的安装包，省事。&lt;/p&gt;
&lt;h4 id=&quot;TIPS：想用C-17之后的看这里&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客迁移</title>
    <link href="https://m12r3dx.github.io/2019/03/10/hexo/"/>
    <id>https://m12r3dx.github.io/2019/03/10/hexo/</id>
    <published>2019-03-10T03:27:22.000Z</published>
    <updated>2019-05-17T09:24:42.663Z</updated>
    
    <content type="html"><![CDATA[<p>日常重做系统，这次把搬迁 Hexo 博客的过程记录下<br>首先把这几个原文件拷到新电脑里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><p>将这些目录放到一个目录下，如：hexo／</p><p>然后就是 git 登录那一套，我就不废话了。</p><p>在你的新电脑上首先配置 hexo 环境：安装 Node.js</p><p>先安装 hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>安装好之后，进入 hexo／目录</p><p>现在安装模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>部署就完事了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日常重做系统，这次把搬迁 Hexo 博客的过程记录下&lt;br&gt;首先把这几个原文件拷到新电脑里&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>Windows Thin PC 安装</title>
    <link href="https://m12r3dx.github.io/2019/03/10/tpc/"/>
    <id>https://m12r3dx.github.io/2019/03/10/tpc/</id>
    <published>2019-03-10T03:19:22.000Z</published>
    <updated>2019-05-17T09:24:42.675Z</updated>
    
    <content type="html"><![CDATA[<p>最近要学S7-200，为了装STEP 7-MicroWIN（同时也是为了我不大的硬盘），特意使用Win 7官方的瘦身版，基本上够用，<br>这里对安装过程中的一些点记录一下。</p><p>系统下载地址：</p><p>1、MSDN（复制到迅雷下载）：<br>ed2k://|file|en_windows_thin_pc_x86_697681.iso|1576980480|2D0E6A048EB3F314F556B4F0834A95E2|/</p><p>2、百度网盘：链接: <a href="https://pan.baidu.com/s/1gfCgs8r" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfCgs8r</a> 密码: sfnr<br>简体中文语言包下载地址：链接: <a href="https://pan.baidu.com/s/1geX4RfX" target="_blank" rel="noopener">https://pan.baidu.com/s/1geX4RfX</a> 密码: cbj7</p><h2 id="一、汉化方法"><a href="#一、汉化方法" class="headerlink" title="一、汉化方法"></a>一、汉化方法</h2><p>1、将中文语言包 lp.cab 放到 C 盘的根目录<br>2、以管理员身份运行 CMD 命令输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism  /online  /add-package  /packagepath:C:\lp.cab</span><br></pre></td></tr></table></figure><p>3、安装完成后，依次运行下面命令，重启电脑即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set &#123;current&#125; locale zh-cn</span><br><span class="line">bcdboot %WinDir% /l zh-cn</span><br></pre></td></tr></table></figure><p>Tips：安装完成后，也可手动更改系统显示的语言（若命令行方法未成功也可运用此方法）：</p><p>点击开始菜单 – Control Panel – Region and Language 就打开区域和语言，按照下图中所示更改重启系统即可。</p><p><img src="https://upload-images.jianshu.io/upload_images/5192780-cf42525ce39d96da.jpeg" alt></p><h2 id="二、系统激活"><a href="#二、系统激活" class="headerlink" title="二、系统激活"></a>二、系统激活</h2><p>证书下载地址：链接: <a href="https://pan.baidu.com/s/1nv86wIl" target="_blank" rel="noopener">https://pan.baidu.com/s/1nv86wIl</a> 密码: nfu1</p><p>1、将证书文件放到 C 盘的根目录</p><p>2、以管理员身份运行 CMD 命令，依次运行下面命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs /ilc c:\pkeyconfig-embedded.xrm-ms</span><br><span class="line">slmgr.vbs /ilc c:\Security-SPP-Component-SKU-Embedded-VLBA-ul.xrm-ms</span><br><span class="line">slmgr.vbs /ilc c:\Security-SPP-Component-SKU-Embedded-VLBA-ul-oob.xrm-ms</span><br><span class="line">slmgr.vbs /ipk XGY72-BRBBT-FF8MH-2GG8H-W7KCW</span><br><span class="line">slmgr.vbs /xpr</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近要学S7-200，为了装STEP 7-MicroWIN（同时也是为了我不大的硬盘），特意使用Win 7官方的瘦身版，基本上够用，&lt;br&gt;这里对安装过程中的一些点记录一下。&lt;/p&gt;
&lt;p&gt;系统下载地址：&lt;/p&gt;
&lt;p&gt;1、MSDN（复制到迅雷下载）：&lt;br&gt;ed2k://
      
    
    </summary>
    
    
      <category term="config" scheme="https://m12r3dx.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>如何在隐私满天飞的时代里保护自我</title>
    <link href="https://m12r3dx.github.io/2019/03/07/protect/"/>
    <id>https://m12r3dx.github.io/2019/03/07/protect/</id>
    <published>2019-03-07T03:09:44.000Z</published>
    <updated>2019-05-17T09:24:42.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a><strong>楔子</strong></h2><hr><p>日剧 dele 中有一个桥段，<br>圭司问祐太郎:’你知不知道，想要进入黑进数字世界的某个空间，需要的是什么？’<br>多数人都以为是技术或是知识，<br>但这只是一部分，更重要的是社交能力和随机应变的能力。</p><blockquote><p><strong>精于人性弱点与黑客技能的骗子是最可怕的。By:evilcos</strong></p></blockquote><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a><strong>原则</strong></h2><hr><ol><li><p>黑暗森林法则</p><blockquote><p><strong>“每个文明都是带枪的猎人…”</strong></p></blockquote><p>这是其实是老话重谈了.</p><p>互联网信息传播的非对称性导致了很多情况的产生，</p><p>最经典的例子是各种黑产们的诈骗电话之流。每当接到这种电话时，<br>人心中常常存有疑问，自己的隐私数据到底是如何泄露出去的。</p><p>我在这里简单的分成两类，请诸位参考：</p><p><strong>一类是对信息控制失效导致的泄露</strong></p><p>这一类的例子主要分为端控制失效和管道控制失效。</p><p>端控制失效比较常见，例如个人的信息泄露。</p><p>当信息的价值被忽视的时候，这种信息泄露有时候是毁灭性的。</p><p>举个栗子，你去办会员，要求提供身份信息（例如身份证，银行卡复印件）。<br>这时候很多人在利益的驱使下(内心 OS:这便宜我不占就亏了)乖乖奉上，<br>这就给人可乘之机，盗用身份，恶意推销甚至更恶劣。而注明专件专用就能有效规避风险。</p><p>管道控制失效相对来说少见但是风险更大，同时个人往往难以招架。</p><p>经典例子就是各种数据泄露，这个讲实话个人很难控制。</p><p>首先是泄露途径，各方面都有可能：业务漏洞，平台漏洞，内部泄密，外部入侵…<br>诸如此类实在太多。</p><p>其次就算你经常改密码，但是只要他能获得你的关联账号和个人信息，<br>依旧能干掉大多数防御机制。<br>举例:利用社工库旧密码+密保问题重置账号密码。</p><p><strong>另一类是基于公开信息研究和社会工程学的结合</strong></p><p>有人讲这不就是蒙么。我觉得还是有点区别的。<br>是人就有弱点，一部分基于行为心理学 + 部分信息收集<br>有时能形成完整的打击链路。<br>钓鱼如此，鱼叉…水坑也是如此。</p></li><li><p>吾日三省吾身</p><p>所以说，无论再好的密码和防护措施，都不如日常对策略的检查来的实际。<br>可以从这几个方面思考：</p><ol><li>攻击我的所需成本几何？（攻击成本，反制措施，潜在价值）</li><li>一旦我被控制，有哪些数据/权限会泄露，最坏的可能是什么？</li><li>如果我是黑客，我能从哪方面下手？</li><li>是否存在应急预案？</li></ol></li><li><p>如果不能控制熵增，那么就改进流程</p><ol><li>生产环境运行仅可信来源的软件，设备，及时更新安全策略和补丁。做好隔离。（不确定的统统扔虚拟机）</li><li>有必要的话，建立多个身份档案，统一管理，限制活动区域。（分割身份，避免追踪）</li><li>定期擦除设备，有必要的话建立分析手段（镜像出来，避免被探测）</li></ol></li></ol><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a><strong>技巧</strong></h2><ol><li>善用工具：<br>Tor，VeraCrypt，密码管理软件（Bitwarden）强推，<br>Firefox 新版（内置内容拦截和密码泄露验证）。<br>以上工具可以使用移动版，避免留下注册表痕迹 。</li><li>不要以为VPN等绝对安全，控制流量出口控制一切。</li><li>系统入侵不可完全规避，重要数据不上网，控制拷贝。</li><li>任何时候记得评估行为的危害，三思而后行。</li></ol><p>最后还是那句话：Be safe,have fun.<br>EOF.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;楔子&quot;&gt;&lt;a href=&quot;#楔子&quot; class=&quot;headerlink&quot; title=&quot;楔子&quot;&gt;&lt;/a&gt;&lt;strong&gt;楔子&lt;/strong&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;日剧 dele 中有一个桥段，&lt;br&gt;圭司问祐太郎:’你知不知道，想要进入黑进数字世界的某个空间
      
    
    </summary>
    
    
      <category term="SecNote" scheme="https://m12r3dx.github.io/tags/SecNote/"/>
    
  </entry>
  
  <entry>
    <title>2019元旦</title>
    <link href="https://m12r3dx.github.io/2018/12/31/18-end/"/>
    <id>https://m12r3dx.github.io/2018/12/31/18-end/</id>
    <published>2018-12-31T15:18:45.000Z</published>
    <updated>2019-09-08T12:32:49.064Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年结束了。</p><p>欢笑也好，<br>眼泪也好，<br>祭典总会结束。</p><p>当人群散去，<br>总有灯指引着行人回家的路。</p><p>徘徊了这么久，<br>我也该上路了。</p><p>个中百味，多谢款待。</p><p>新的一年，<br>也请多多关照。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又是一年结束了。&lt;/p&gt;
&lt;p&gt;欢笑也好，&lt;br&gt;眼泪也好，&lt;br&gt;祭典总会结束。&lt;/p&gt;
&lt;p&gt;当人群散去，&lt;br&gt;总有灯指引着行人回家的路。&lt;/p&gt;
&lt;p&gt;徘徊了这么久，&lt;br&gt;我也该上路了。&lt;/p&gt;
&lt;p&gt;个中百味，多谢款待。&lt;/p&gt;
&lt;p&gt;新的一年，&lt;br&gt;也请多多
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>2019计划</title>
    <link href="https://m12r3dx.github.io/2018/12/26/plan19/"/>
    <id>https://m12r3dx.github.io/2018/12/26/plan19/</id>
    <published>2018-12-26T07:00:00.000Z</published>
    <updated>2019-05-17T09:24:42.670Z</updated>
    
    <content type="html"><![CDATA[<p>内心 OS:”完不成就直接改成2020算了…”(^_^)</p><h2 id="记一笔准备捣鼓的几个方向"><a href="#记一笔准备捣鼓的几个方向" class="headerlink" title="记一笔准备捣鼓的几个方向"></a>记一笔准备捣鼓的几个方向</h2><ul><li>如何在资源有限的情况下进行深度学习  (Cpp+Py炼丹) </li><li>智能电网/工业控制系统安全 (抄论文，写工具) </li><li>自适应算法在潮流计算的应用</li></ul><h2 id="需要解决的几个欠账问题"><a href="#需要解决的几个欠账问题" class="headerlink" title="需要解决的几个欠账问题"></a>需要解决的几个欠账问题</h2><ul><li>数据结构&amp;算法 (LeetCode)</li><li>工作流成型了，接下来流程自动化起来</li><li>电路相关&amp;数学 (快考研了)</li><li>相关知识(应用/基础)&amp;项目经验总结 (MAKES，以速成课形式)</li><li>毕业设计考虑一下?</li><li>Pwn!Pwn!Pwn! (各种层面:Pen+Exp+Reverse…)</li></ul><h2 id="个人的一点小愿望"><a href="#个人的一点小愿望" class="headerlink" title="个人的一点小愿望"></a>个人的一点小愿望</h2><ul><li>减肥</li><li>良好作息</li><li>适当拉拉体能了</li><li>多看几本书(非专业的/专业上的)</li><li>写点总结性质的东西 (类似耗子叔的ARTS)</li></ul><p>以上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内心 OS:”完不成就直接改成2020算了…”(^_^)&lt;/p&gt;
&lt;h2 id=&quot;记一笔准备捣鼓的几个方向&quot;&gt;&lt;a href=&quot;#记一笔准备捣鼓的几个方向&quot; class=&quot;headerlink&quot; title=&quot;记一笔准备捣鼓的几个方向&quot;&gt;&lt;/a&gt;记一笔准备捣鼓的几个方向&lt;/
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>PWA支持</title>
    <link href="https://m12r3dx.github.io/2018/12/15/pwa/"/>
    <id>https://m12r3dx.github.io/2018/12/15/pwa/</id>
    <published>2018-12-15T11:27:21.000Z</published>
    <updated>2019-05-17T09:24:42.673Z</updated>
    
    <content type="html"><![CDATA[<p>先说一下说明是PWA， </p><blockquote><p>PWA(Progressive Web Apps) 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。</p></blockquote><blockquote><p>PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p></blockquote><blockquote><p>PWA 的主要特点包括下面三点：</p></blockquote><blockquote><ul><li>可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现</li><li>体验 - 快速响应，并且有平滑的动画响应用户的操作</li><li>粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面</li></ul></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fjfvzwpgctg30gl0k1u0x.gif" alt></p><p>简单的说就是让网页像APP一样使用，听着是不是很像微信小程序。其实小程序就是PWA的一个变种。传统的PWA需要依托 Chrome 来使用，而小程序则依托于微信。</p><p>那么如何快速使 blog 支持 PWA 呢？</p><h2 id="支持-HTTPS"><a href="#支持-HTTPS" class="headerlink" title="支持 HTTPS"></a>支持 HTTPS</h2><p>PWA依赖 HTTPS ，增加离线化能力。</p><p>首先需要使网站支持 Https，就像我的网站，有 secure 标志。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fjfvw3876hj31kw08cdhk.jpg" alt></p><p>我是部署在 Coding 的，直接支持 Https，具体使用我就不展开说了。</p><h2 id="支持-PWA"><a href="#支持-PWA" class="headerlink" title="支持 PWA"></a>支持 PWA</h2><p>首先在自己博客的根目录，安装 <a href="https://www.npmjs.com/package/hexo-offline" target="_blank" rel="noopener">hexo-offline</a></p><blockquote><p>hexo-offline is intended to provide offline experience for hexo built static website. It uses ServiceWorker under the hood. Simply install this plugin to your website and it should be offline ready by caching most of static assets.<br>hexo-offline 是一个 hexo 用来让博客拥有 Service Worker 功能的插件，能够默认的把站点中 public 内的所有静态资源包括 html 文件缓存起来，达到离线可访问的效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-offline --save</span><br></pre></td></tr></table></figure><p>安装插件后，直接配置 _config.yml 文件如下就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># offline config passed to sw-precache.</span><br><span class="line">service_worker:</span><br><span class="line">  maximumFileSizeToCacheInBytes: 5242880</span><br><span class="line">  staticFileGlobs:</span><br><span class="line">  - public/**/*.&#123;js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2&#125;</span><br><span class="line">  stripPrefix: public</span><br><span class="line">  verbose: true</span><br></pre></td></tr></table></figure><p>以上配置是缓存 public 文件夹下面的指定静态资源和静态 html 页面的。</p><p>如果除了自身博客项目的静态资源需要缓存以外，还有第三方 CDN 静态资源的缓存需求的话，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- https://cdn.some.com/some/path/some-script.js</span><br><span class="line">- http://cdn.some-else.org/some/path/deeply/some-style.css</span><br></pre></td></tr></table></figure><p>这种需求也可以通过配置 _config.yml 完成，在 servcie_worker 的配置后面补全下面格式的配置即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">service_worker:</span><br><span class="line">  runtimeCaching:</span><br><span class="line">    - urlPattern: /*</span><br><span class="line">      handler: cacheFirst</span><br><span class="line">      options:</span><br><span class="line">        origin: cdn.some.com</span><br><span class="line">    - urlPattern: /*</span><br><span class="line">      handler: cacheFirst</span><br><span class="line">      options:</span><br><span class="line">        origin: cdn.some-else.org</span><br></pre></td></tr></table></figure><p>生成 <code>manifest.json</code>文件，你需要将创建这个文件到source目录下。比如我的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Why·Liam·Blog&quot;,</span><br><span class="line">  &quot;short_name&quot;: &quot;Why·Liam&quot;,</span><br><span class="line">  &quot;theme_color&quot;: &quot;#2196f3&quot;,</span><br><span class="line">  &quot;background_color&quot;: &quot;#2196f3&quot;,</span><br><span class="line">  &quot;display&quot;: &quot;fullscreen&quot;,</span><br><span class="line">  &quot;orientation&quot;: &quot;portrait&quot;,</span><br><span class="line">  &quot;Scope&quot;: &quot;/&quot;,</span><br><span class="line">  &quot;start_url&quot;: &quot;/&quot;,</span><br><span class="line">  &quot;icons&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images/icons/icon-72x72.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;72x72&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image/png&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;splash_pages&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的icon图片放在博客的<code>source/images/icons</code>目录下，记得要和<code>manifest.json</code>中的icon路径匹配。 </p><p>当然可以快速的配置，直接无脑生成<a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener">App Manifest Generator</a></p><p>还有重要的一个环节，引入<code>manifest.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure><p>比如我使用了 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a>的主题，在<code>layout/_custom/header.swig</code> 中引用了<code>manifest.json</code>。</p><p>接下开就看效果吧!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先说一下说明是PWA， &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PWA(Progressive Web Apps) 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
    
      <category term="crash course" scheme="https://m12r3dx.github.io/tags/crash-course/"/>
    
  </entry>
  
  <entry>
    <title>速成课:Vim简明指南</title>
    <link href="https://m12r3dx.github.io/2018/11/12/vim/"/>
    <id>https://m12r3dx.github.io/2018/11/12/vim/</id>
    <published>2018-11-11T16:30:27.000Z</published>
    <updated>2019-05-17T09:24:42.679Z</updated>
    
    <content type="html"><![CDATA[<p>vim 的学习曲线相当的大（参看耗子叔<a href="https://coolshell.cn/articles/3125.html" title="主流文本编辑器学习曲线" target="_blank" rel="noopener">各种文本编辑器的学习曲线</a>），所以，如果你一开始看到的是一大堆 VIM 的命令分类，你一定会对这个编辑器失去兴趣的。</p><p>下面的文章翻译自《<a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="noopener">Learn Vim Progressively</a>》，我觉得这是给新手最好的 VIM 的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。</p><hr><p>你想以最快的速度学习人类史上最好的文本编辑器 VIM 吗？你先得懂得如何在 VIM 幸存下来，然后一点一点地学习各种戏法。</p><p><a href="http://www.vim.org" target="_blank" rel="noopener">Vim</a> the Six Billion Dollar editor</p><blockquote><p>Better, Stronger, Faster.</p></blockquote><p>学习 <a href="http://www.vim.org" target="_blank" rel="noopener">vim</a> 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。</p><p>我建议下面这四个步骤：</p><ol><li>存活</li><li>感觉良好</li><li>觉得更好，更强，更快</li><li>使用 VIM 的超能力</li></ol><p>当你走完这篇文章，你会成为一个 vim 的 superstar。</p><p>在开始学习以前，我需要给你一些警告：</p><ul><li>学习 vim 在开始时是痛苦的。</li><li>需要时间</li><li>需要不断地练习，就像你学习一个乐器一样。</li><li>不要期望你能在 3 天内把 vim 练得比别的编辑器更有效率。</li><li>事实上，你需要 2 周时间的苦练，而不是 3 天。</li></ul><h4 id="第一级-–-存活"><a href="#第一级-–-存活" class="headerlink" title="第一级 – 存活"></a>第一级 – 存活</h4><ol><li>安装 <a href="http://www.vim.org" target="_blank" rel="noopener">vim</a></li><li>启动 vim</li><li><strong>什么也别干！</strong>请先阅读</li></ol><p>当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但 vim 不是这样的，请按照下面的命令操作：</p><ul><li>启 动 Vim 后，vim 在 <em>Normal</em> 模式下。</li><li>让我们进入 <em>Insert</em> 模式，请按下键 i 。(注：你会看到 vim 左下角有一个–insert–字样，表示，你可以以插入的方式输入了）</li><li>此时，你可以输入文本了，就像你用 “记事本” 一样。</li><li>如果你想返回 <em>Normal</em> 模式，请按 <code>ESC</code> 键。</li></ul><p>现在，你知道如何在 <em>Insert</em> 和 <em>Normal</em> 模式下切换了。下面是一些命令，可以让你在 <em>Normal</em> 模式下幸存下来：</p><blockquote><ul><li><code>i</code> → <em>Insert</em> 模式，按 <code>ESC</code> 回到 <em>Normal</em> 模式.</li><li><code>x</code> → 删当前光标所在的一个字符。</li><li><code>:wq</code> → 存盘 + 退出 (<code>:w</code> 存盘, <code>:q</code> 退出)   （注：:w 后可以跟文件名）</li><li><code>dd</code> → 删除当前行，并把删除的行存到剪贴板里</li><li><code>p</code> → 粘贴剪贴板</li></ul><p><strong>推荐</strong>:</p><ul><li><code>hjkl</code> (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: <code>j</code> 就像下箭头。</li><li><code>:help &lt;command&gt;</code> → 显示相关命令的帮助。你也可以就输入 <code>:help</code> 而不跟命令。（注：退出帮助需要输入: q）</li></ul></blockquote><p>你能在 vim 幸存下来只需要上述的那 5 个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。</p><p>当是，在你进入第二级时，需要再说一下 <em>Normal</em> 模式。在一般的编辑器下，当你需要 copy 一段文字的时候，你需要使用 <code>Ctrl</code> 键，比如：<code>Ctrl-C</code>。也就是说，Ctrl 键就好像功能键一样，当你按下了功能键 Ctrl 后，C 就不在是 C 了，而且就是一个命令或是一个快键键了，<strong>在 VIM 的 Normal 模式下，所有的键就是功能键了</strong>。这个你需要知道。</p><p>标记:</p><ul><li>下面的文字中，如果是 <code>Ctrl-λ</code>我会写成 <code>&lt;C-λ&gt;</code>.</li><li>以 <code>:</code> 开始的命令你需要输入 <code>&lt;enter&gt;</code>回车，例如 — 如果我写成 <code>:q</code> 也就是说你要输入 <code>:q&lt;enter&gt;</code>.</li></ul><h4 id="第二级-–-感觉良好"><a href="#第二级-–-感觉良好" class="headerlink" title="第二级 – 感觉良好"></a>第二级 – 感觉良好</h4><p>上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（注：所有的命令都需要在 Normal 模式下使用，如果你不知道现在在什么样的模式，你就狂按几次 ESC 键）</p><ol><li><p><strong>各种插入模式</strong></p><blockquote><ul><li><code>a</code> → 在光标后插入</li><li><code>o</code> → 在当前行后插入一个新行</li><li><code>O</code> → 在当前行前插入一个新行</li><li><code>cw</code> → 替换从光标所在位置后到一个单词结尾的字符</li></ul></blockquote></li><li><p><strong>简单的移动光标</strong></p><blockquote><ul><li><code>0</code> → 数字零，到行头</li><li><code>^</code> → 到本行第一个不是 blank 字符的位置（所谓 blank 字符就是空格，tab，换行，回车等）</li><li><code>$</code> → 到本行行尾</li><li><code>g_</code> → 到本行最后一个不是 blank 字符的位置。</li><li><code>/pattern</code> → 搜索 <code>pattern</code> 的字符串（注：如果搜索出多个匹配，可按 n 键到下一个）</li></ul></blockquote></li><li><p><strong>拷贝 / 粘贴</strong> （注：p/P 都可以，p 是表示在当前位置之后，P 表示在当前位置之前）</p><blockquote><ul><li><code>P</code> → 粘贴</li><li><code>yy</code> → 拷贝当前行当行于 <code>ddP</code></li></ul></blockquote></li><li><p><strong>Undo/Redo</strong></p><blockquote><ul><li><code>u</code> → undo</li><li><code>&lt;C-r&gt;</code> → redo</li></ul></blockquote></li><li><p><strong>打开 / 保存 / 退出 / 改变文件</strong> (Buffer)</p><blockquote><ul><li><code>:e &lt;path/to/file&gt;</code> → 打开一个文件</li><li><code>:w</code> → 存盘</li><li><code>:saveas &lt;path/to/file&gt;</code> → 另存为 <code>&lt;path/to/file&gt;</code></li><li><code>:x</code>， <code>ZZ</code> 或 <code>:wq</code> → 保存并退出 (<code>:x</code> 表示仅在需要时保存，ZZ 不需要输入冒号并回车)</li><li><code>:q!</code> → 退出不保存 <code>:qa!</code> 强行退出所有的正在编辑的文件，就算别的文件有更改。</li><li><code>:bn</code> 和 <code>:bp</code> → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（注：我喜欢使用: n 到下一个文件）</li></ul></blockquote></li></ol><p>花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用 vim 还是有点笨拙，不过没关系，你可以进阶到第三级了。</p><h4 id="第三级-–-更好，更强，更快"><a href="#第三级-–-更好，更强，更快" class="headerlink" title="第三级 – 更好，更强，更快"></a>第三级 – 更好，更强，更快</h4><p>先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和 vi 可以兼容的命令。</p><h5 id="更好"><a href="#更好" class="headerlink" title="更好"></a>更好</h5><p>下面，让我们看一下 vim 是怎么重复自己的：</p><ol><li><code>.</code> → (小数点) 可以重复上一次的命令</li><li>N<command> → 重复某个命令 N 次</li></ol><p>下面是一个示例，找开一个文件你可以试试下面的命令：</p><blockquote><ul><li><code>2dd</code> → 删除 2 行</li><li><code>3p</code> → 粘贴文本 3 次</li><li><code>100idesu [ESC]</code> → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “</li><li><code>.</code> → 重复上一个命令—— 100 “desu “.</li><li><code>3.</code> → 重复 3 次 “desu” (注意：不是 300，你看，VIM 多聪明啊).</li></ul></blockquote><h5 id="更强"><a href="#更强" class="headerlink" title="更强"></a>更强</h5><p>你要让你的光标移动更有效率，你一定要了解下面的这些命令，<strong>千万别跳过</strong>。</p><ol><li>N<code>G</code> → 到第 N 行 （注：注意命令中的 G 是大写的，另我一般使用 : N 到第 N 行，如 :137 到第 137 行）</li><li><code>gg</code> → 到第一行。（注：相当于 1G，或 :1）</li><li><code>G</code> → 到最后一行。</li><li><p>按单词移动：</p><blockquote><ol><li><code>w</code> → 到下一个单词的开头。</li><li><code>e</code> → 到下一个单词的结尾。</li></ol><blockquote><p>如果你认为单词是由默认方式，那么就用小写的 e 和 w。默认上来说，一个单词由字母，数字和下划线组成（注：程序变量）</p></blockquote><blockquote><p>如果你认为单词是由 blank 字符分隔符，那么你需要使用大写的 E 和 W。（注：程序语句）</p></blockquote><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/word_moves.jpg" alt></p></blockquote></li></ol><p>下面，让我来说说最强的光标移动：</p><blockquote><ul><li><code>%</code> : 匹配括号移动，包括 <code>(</code>, <code>{</code>, <code>[</code>. （注：你需要把光标先移到括号上）</li><li><code>*</code> 和 <code>#</code>:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（* 是下一个，# 是上一个）</li></ul></blockquote><p>相信我，上面这三个命令对程序员来说是相当强大的。</p><h5 id="更快"><a href="#更快" class="headerlink" title="更快"></a>更快</h5><p>你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：</p><p><code>&lt;start position&gt;&lt;command&gt;&lt;end position&gt;</code></p><p>例如 <code>0y$</code> 命令意味着：</p><ul><li><code>0</code> → 先到行头</li><li><code>y</code> → 从这里开始拷贝</li><li><code>$</code> → 拷贝到本行最后一个字符</li></ul><p>你可可以输入 <code>ye</code>，从当前位置拷贝到本单词的最后一个字符。</p><p>你也可以输入 <code>y2/foo</code> 来拷贝 2 个 “foo” 之间的字符串。</p><p>还有很多时间并不一定你就一定要按 y 才会拷贝，下面的命令也会被拷贝：</p><ul><li><code>d</code> (删除)</li><li><code>v</code> (可视化的选择)</li><li><code>gU</code> (变大写)</li><li><code>gu</code> (变小写)</li><li>等等</li></ul><p>（注：可视化选择是一个很有意思的命令，你可以先按 v，然后移动光标，你就会看到文本被选择，然后，你可能 d，也可 y，也可以变大写等）</p><h4 id="第四级-–-Vim-超能力"><a href="#第四级-–-Vim-超能力" class="headerlink" title="第四级 – Vim 超能力"></a>第四级 – Vim 超能力</h4><p>你只需要掌握前面的命令，你就可以很舒服的使用 VIM 了。但是，现在，我们向你介绍的是 VIM 杀手级的功能。下面这些功能是我只用 vim 的原因。</p><h5 id="在当前行上移动光标-0-f-F-t-T"><a href="#在当前行上移动光标-0-f-F-t-T" class="headerlink" title="在当前行上移动光标: 0 ^ $ f F t T , ;"></a>在当前行上移动光标: <code>0</code> <code>^</code> <code>$</code> <code>f</code> <code>F</code> <code>t</code> <code>T</code> <code>,</code> <code>;</code></h5><blockquote><ul><li><code>0</code> → 到行头</li><li><code>^</code> → 到本行的第一个非 blank 字符</li><li><code>$</code> → 到行尾</li><li><code>g_</code> → 到本行最后一个不是 blank 字符的位置。</li><li><code>fa</code> → 到下一个为 a 的字符处，你也可以 fs 到下一个为 s 的字符。</li><li><code>t,</code> → 到逗号前的第一个字符。逗号可以变成其它字符。</li><li><code>3fa</code> → 在当前行查找第三个出现的 a。</li><li><code>F</code> 和 <code>T</code> → 和 <code>f</code> 和 <code>t</code> 一样，只不过是相反方向。<br><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/line_moves.jpg" alt></li></ul></blockquote><p>还有一个很有用的命令是 <code>dt&quot;</code> → 删除所有的内容，直到遇到双引号—— <code>&quot;。</code></p><h5 id="区域选择-lt-action-gt-a-lt-object-gt-或-lt-action-gt-i-lt-object-gt"><a href="#区域选择-lt-action-gt-a-lt-object-gt-或-lt-action-gt-i-lt-object-gt" class="headerlink" title="区域选择 &lt;action&gt;a&lt;object&gt; 或 &lt;action&gt;i&lt;object&gt;"></a>区域选择 <code>&lt;action&gt;a&lt;object&gt;</code> 或 <code>&lt;action&gt;i&lt;object&gt;</code></h5><p>在 visual 模式下，这些命令很强大，其命令格式为</p><p><code>&lt;action&gt;a&lt;object&gt;</code> 和 <code>&lt;action&gt;i&lt;object&gt;</code></p><ul><li>action 可以是任何的命令，如 <code>d</code> (删除), <code>y</code> (拷贝), <code>v</code> (可以视模式选择)。</li><li>object 可能是： <code>w</code> 一个单词， <code>W</code> 一个以空格为分隔的单词， <code>s</code> 一个句字， <code>p</code> 一个段落。也可以是一个特别的字符：<code>&quot;、</code> <code>&#39;、</code> <code>)、</code> <code>}、</code> <code>]。</code></li></ul><p>假设你有一个字符串 <code>(map (+) (&quot;foo&quot;))</code>. 而光标键在第一个 <code>o</code>的位置。</p><blockquote><ul><li><code>vi&quot;</code> → 会选择 <code>foo</code>.</li><li><code>va&quot;</code> → 会选择 <code>&quot;foo&quot;</code>.</li><li><code>vi)</code> → 会选择 <code>&quot;foo&quot;</code>.</li><li><code>va)</code> → 会选择<code>(&quot;foo&quot;)</code>.</li><li><code>v2i)</code> → 会选择 <code>map (+) (&quot;foo&quot;)</code></li><li><code>v2a)</code> → 会选择 <code>(map (+) (&quot;foo&quot;))</code></li></ul></blockquote><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/textobjects.png" alt></p><h5 id="块操作-lt-C-v-gt"><a href="#块操作-lt-C-v-gt" class="headerlink" title="块操作: &lt;C-v&gt;"></a>块操作: <code>&lt;C-v&gt;</code></h5><p>块操作，典型的操作： <code>0 &lt;C-v&gt; &lt;C-d&gt; I-- [ESC]</code></p><ul><li><code>^</code> → 到行头</li><li><code>&lt;C-v&gt;</code> → 开始块操作</li><li><code>&lt;C-d&gt;</code> → 向下移动 (你也可以使用 hjkl 来移动光标，或是使用 %，或是别的)</li><li><code>I-- [ESC]</code> → I 是插入，插入 “<code>--</code>”，按 ESC 键来为每一行生效。</li></ul><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/rectangular-blocks.gif" alt></p><p>在 Windows 下的 vim，你需要使用 <code>&lt;C-q&gt;</code> 而不是 <code>&lt;C-v&gt;</code> ，<code>&lt;C-v&gt;</code> 是拷贝剪贴板。</p><h5 id="自动提示：-lt-C-n-gt-和-lt-C-p-gt"><a href="#自动提示：-lt-C-n-gt-和-lt-C-p-gt" class="headerlink" title="自动提示： &lt;C-n&gt; 和 &lt;C-p&gt;"></a>自动提示： <code>&lt;C-n&gt;</code> 和 <code>&lt;C-p&gt;</code></h5><p>在 Insert 模式下，你可以输入一个词的开头，然后按 <code>&lt;C-p&gt;或是&lt;C-n&gt;，自动补齐功能就出现了……</code></p><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/completion.gif" alt></p><h5 id="宏录制：-qa-操作序列-q-a"><a href="#宏录制：-qa-操作序列-q-a" class="headerlink" title="宏录制： qa 操作序列 q, @a, @@"></a>宏录制： <code>qa</code> 操作序列 <code>q</code>, <code>@a</code>, <code>@@</code></h5><ul><li><code>qa</code> 把你的操作记录在寄存器 <code>a。</code></li><li>于是 <code>@a</code> 会 replay 被录制的宏。</li><li><code>@@</code> 是一个快捷键用来 replay 最新录制的宏。</li></ul><blockquote><p><strong>_示例_</strong></p><p>在一个只有一行且这一行只有 “1” 的文本中，键入如下命令：</p><ul><li><code>qaYp&lt;C-a&gt;q</code>→<ul><li><code>qa</code> 开始录制</li><li><code>Yp</code> 复制行.</li><li><code>&lt;C-a&gt;</code> 增加 1.</li><li><code>q</code> 停止录制.</li></ul></li><li><code>@a</code> → 在 1 下面写下 2</li><li><code>@@</code> → 在 2 正面写下 3</li><li>现在做 <code>100@@</code> 会创建新的 100 行，并把数据增加到 103.</li></ul></blockquote><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/macros.gif" alt></p><h5 id="可视化选择：-v-V-lt-C-v-gt"><a href="#可视化选择：-v-V-lt-C-v-gt" class="headerlink" title="可视化选择： v,V,&lt;C-v&gt;"></a>可视化选择： <code>v</code>,<code>V</code>,<code>&lt;C-v&gt;</code></h5><p>前面，我们看到了 <code>&lt;C-v&gt;</code>的示例 （在 Windows 下应该是 <c-q>），我们可以使用 <code>v</code> 和 <code>V</code>。一但被选好了，你可以做下面的事：</c-q></p><ul><li><code>J</code> → 把所有的行连接起来（变成一行）</li><li><code>&lt;</code> 或 <code>&gt;</code> → 左右缩进</li><li><code>=</code> → 自动给缩进 （注：这个功能相当强大，我太喜欢了）</li></ul><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/autoindent.gif" alt></p><p>在所有被选择的行后加上点东西：</p><ul><li><code>&lt;C-v&gt;</code></li><li>选中相关的行 (可使用 <code>j</code> 或 <code>&lt;C-d&gt;</code> 或是 <code>/pattern</code> 或是 <code>%</code> 等……)</li><li><code>$</code> 到行最后</li><li><code>A</code>, 输入字符串，按 <code>ESC。</code></li></ul><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/append-to-many-lines.gif" alt></p><h5 id="分屏-split-和-vsplit"><a href="#分屏-split-和-vsplit" class="headerlink" title="分屏: :split 和 vsplit."></a>分屏: <code>:split</code> 和 <code>vsplit</code>.</h5><p>下面是主要的命令，你可以使用 VIM 的帮助 <code>:help split</code>. 你可以参考耗子叔的一篇文章 <a href="https://coolshell.cn/articles/1679.html" title="Vim的分屏功能" target="_blank" rel="noopener">VIM 分屏</a>。</p><blockquote><ul><li><code>:split</code> → 创建分屏 (<code>:vsplit</code>创建垂直分屏)</li><li><code>&lt;C-w&gt;&lt;dir&gt;</code> : dir 就是方向，可以是 <code>hjkl</code> 或是 ←↓↑→ 中的一个，其用来切换分屏。</li><li><code>&lt;C-w&gt;_</code> (或 <code>&lt;C-w&gt;|</code>) : 最大化尺寸 (<c-w>| 垂直分屏)</c-w></li><li><code>&lt;C-w&gt;+</code> (或 <code>&lt;C-w&gt;-</code>) : 增加尺寸</li></ul></blockquote><p><img src="http://yannesposito.com/Scratch/img/blog/Learn-Vim-Progressively/split.gif" alt></p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><ul><li>上面是作者最常用的 90% 的命令。</li><li>我建议你每天都学 1 到 2 个新的命令。</li><li><p>在两到三周后，你会感到 vim 的强大的。</p></li><li><p>有时候，学习 VIM 就像是在死背一些东西。</p></li><li>幸运的是，vim 有很多很不错的工具和优秀的文档。</li><li>运行 vimtutor 直到你熟悉了那些基本命令。</li><li>其在线帮助文档中你应该要仔细阅读的是 <code>:help usr_02.txt</code>.</li><li>你会学习到诸如  <code>!，</code> 目录，寄存器，插件等很多其它的功能。</li></ul><p>学习 vim 就像学弹钢琴一样，一旦学会，受益无穷。</p><h4 id="附加节：如何通过自定义来使vim像IDE一样"><a href="#附加节：如何通过自定义来使vim像IDE一样" class="headerlink" title="附加节：如何通过自定义来使vim像IDE一样"></a>附加节：如何通过自定义来使vim像IDE一样</h4><p>其实修改.vimrc并安装插件(eg:YouCompleteMe)</p><p>就可以很好的把vim用起来了。</p><p>贴一下.vimrc给各位参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br></pre></td><td class="code"><pre><span class="line">&quot; 更新时间：2019-3-14 By:m12r3dx</span><br><span class="line"></span><br><span class="line">&quot; 定义快捷键的前缀，即 &lt;Leader&gt;</span><br><span class="line">let mapleader=&quot;;&quot;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 文件类型侦测</span><br><span class="line"></span><br><span class="line">&quot; 开启文件类型侦测</span><br><span class="line">filetype on</span><br><span class="line">&quot; 根据侦测到的不同类型加载对应的插件</span><br><span class="line">filetype plugin on</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; vim 自身（非插件）快捷键</span><br><span class="line"></span><br><span class="line">&quot; 定义快捷键到行首和行尾</span><br><span class="line">nmap LB 0</span><br><span class="line">nmap LE $</span><br><span class="line"></span><br><span class="line">&quot; 设置快捷键将选中文本块复制至系统剪贴板</span><br><span class="line">vnoremap &lt;Leader&gt;y &quot;+y</span><br><span class="line">&quot; 设置快捷键将系统剪贴板内容粘贴至vim</span><br><span class="line">nmap &lt;Leader&gt;p &quot;+p</span><br><span class="line"></span><br><span class="line">&quot; 定义快捷键关闭当前分割窗口</span><br><span class="line">nmap &lt;Leader&gt;q :q&lt;CR&gt;</span><br><span class="line">&quot; 定义快捷键保存当前窗口内容</span><br><span class="line">nmap &lt;Leader&gt;w :w&lt;CR&gt;</span><br><span class="line">&quot; 定义快捷键保存所有窗口内容并退出 vim</span><br><span class="line">nmap &lt;Leader&gt;WQ :wa&lt;CR&gt;:q&lt;CR&gt;</span><br><span class="line">&quot; 不做任何保存，直接退出 vim</span><br><span class="line">nmap &lt;Leader&gt;Q :qa!&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; 设置快捷键遍历子窗口</span><br><span class="line">&quot; 依次遍历</span><br><span class="line">nnoremap nw &lt;C-W&gt;&lt;C-W&gt;</span><br><span class="line">&quot; 跳转至右方的窗口</span><br><span class="line">nnoremap &lt;Leader&gt;lw &lt;C-W&gt;l</span><br><span class="line">&quot; 跳转至方的窗口</span><br><span class="line">nnoremap &lt;Leader&gt;hw &lt;C-W&gt;h</span><br><span class="line">&quot; 跳转至上方的子窗口</span><br><span class="line">nnoremap &lt;Leader&gt;kw &lt;C-W&gt;k</span><br><span class="line">&quot; 跳转至下方的子窗口</span><br><span class="line">nnoremap &lt;Leader&gt;jw &lt;C-W&gt;j</span><br><span class="line"></span><br><span class="line">&quot; 定义快捷键在结对符之间跳转</span><br><span class="line">nmap &lt;Leader&gt;M %</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; 让配置变更立即生效</span><br><span class="line">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 其他</span><br><span class="line"></span><br><span class="line">&quot; 开启实时搜索功能</span><br><span class="line">set incsearch</span><br><span class="line"></span><br><span class="line">&quot; 搜索时大小写不敏感</span><br><span class="line">set ignorecase</span><br><span class="line"></span><br><span class="line">&quot; 关闭兼容模式</span><br><span class="line">set nocompatible</span><br><span class="line"></span><br><span class="line">&quot; vim 自身命令行模式智能补全</span><br><span class="line">set wildmenu</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;&gt;&gt;</span><br><span class="line">&quot; 插件安装</span><br><span class="line"></span><br><span class="line">&quot; vundle 环境设置</span><br><span class="line">filetype off</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">&quot; vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间</span><br><span class="line">call vundle#begin()</span><br><span class="line"></span><br><span class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</span><br><span class="line">Plugin &apos;altercation/vim-colors-solarized&apos;</span><br><span class="line">Plugin &apos;tomasr/molokai&apos;</span><br><span class="line">Plugin &apos;vim-scripts/phd&apos;</span><br><span class="line">Plugin &apos;Lokaltog/vim-powerline&apos;</span><br><span class="line">Plugin &apos;octol/vim-cpp-enhanced-highlight&apos;</span><br><span class="line">Plugin &apos;nathanaelkane/vim-indent-guides&apos;</span><br><span class="line">Plugin &apos;derekwyatt/vim-fswitch&apos;</span><br><span class="line">Plugin &apos;kshenoy/vim-signature&apos;</span><br><span class="line">Plugin &apos;vim-scripts/BOOKMARKS--Mark-and-Highlight-Full-Lines&apos;</span><br><span class="line">Plugin &apos;majutsushi/tagbar&apos;</span><br><span class="line">Plugin &apos;vim-scripts/indexer.tar.gz&apos;</span><br><span class="line">Plugin &apos;vim-scripts/DfrankUtil&apos;</span><br><span class="line">Plugin &apos;vim-scripts/vimprj&apos;</span><br><span class="line">Plugin &apos;dyng/ctrlsf.vim&apos;</span><br><span class="line">Plugin &apos;terryma/vim-multiple-cursors&apos;</span><br><span class="line">Plugin &apos;scrooloose/nerdcommenter&apos;</span><br><span class="line">Plugin &apos;vim-scripts/DrawIt&apos;</span><br><span class="line">Plugin &apos;SirVer/ultisnips&apos;</span><br><span class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</span><br><span class="line">Plugin &apos;derekwyatt/vim-protodef&apos;</span><br><span class="line">Plugin &apos;scrooloose/nerdtree&apos;</span><br><span class="line">Plugin &apos;fholgado/minibufexpl.vim&apos;</span><br><span class="line">Plugin &apos;gcmt/wildfire.vim&apos;</span><br><span class="line">Plugin &apos;sjl/gundo.vim&apos;</span><br><span class="line">Plugin &apos;Lokaltog/vim-easymotion&apos;</span><br><span class="line">Plugin &apos;suan/vim-instant-markdown&apos;</span><br><span class="line">Plugin &apos;lilydjwg/fcitx.vim&apos;</span><br><span class="line"></span><br><span class="line">&quot; 插件列表结束</span><br><span class="line">call vundle#end()</span><br><span class="line">filetype plugin indent on</span><br><span class="line">&quot; &lt;&lt;&lt;&lt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let g:ycm_global_ycm_extra_conf=&apos;~/.vim/.ycm_extra_conf.py&apos;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 营造专注气氛</span><br><span class="line"></span><br><span class="line">&quot; 禁止光标闪烁</span><br><span class="line">set gcr=a:block-blinkon0</span><br><span class="line"></span><br><span class="line">&quot; 禁止显示滚动条</span><br><span class="line">set guioptions-=l</span><br><span class="line">set guioptions-=L</span><br><span class="line">set guioptions-=r</span><br><span class="line">set guioptions-=R</span><br><span class="line"></span><br><span class="line">&quot; 禁止显示菜单和工具条</span><br><span class="line">set guioptions-=m</span><br><span class="line">set guioptions-=T</span><br><span class="line"></span><br><span class="line">&quot; 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数</span><br><span class="line">fun! ToggleFullscreen()</span><br><span class="line">truecall system(&quot;wmctrl -ir &quot; . v:windowid . &quot; -b toggle,fullscreen&quot;)</span><br><span class="line">endf</span><br><span class="line">&quot; 全屏开/关快捷键</span><br><span class="line">map &lt;silent&gt; &lt;F11&gt; :call ToggleFullscreen()&lt;CR&gt;</span><br><span class="line">&quot;&quot; 启动 vim 时自动全屏</span><br><span class="line">&quot;autocmd VimEnter * call ToggleFullscreen()</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 辅助信息</span><br><span class="line"></span><br><span class="line">&quot; 总是显示状态栏</span><br><span class="line">set laststatus=2</span><br><span class="line"></span><br><span class="line">&quot; 显示光标当前位置</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line">&quot; 开启行号显示</span><br><span class="line">set number</span><br><span class="line"></span><br><span class="line">&quot; 高亮显示搜索结果</span><br><span class="line">set hlsearch</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 其他美化</span><br><span class="line"></span><br><span class="line">&quot; 设置 gvim 显示字体</span><br><span class="line">set guifont=YaHei\ Consolas\ Hybrid\ 10.5</span><br><span class="line"></span><br><span class="line">&quot; 禁止折行</span><br><span class="line">set nowrap</span><br><span class="line"></span><br><span class="line">&quot; 设置状态栏主题风格</span><br><span class="line">let g:Powerline_colorscheme=&apos;solarized256&apos;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 语法分析</span><br><span class="line"></span><br><span class="line">&quot; 开启语法高亮功能</span><br><span class="line">syntax enable</span><br><span class="line">&quot; 允许用指定语法高亮配色方案替换默认方案</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 缩进</span><br><span class="line"></span><br><span class="line">&quot; 自适应不同语言的智能缩进</span><br><span class="line">filetype indent on</span><br><span class="line"></span><br><span class="line">&quot; 将制表符扩展为空格</span><br><span class="line">set expandtab</span><br><span class="line">&quot; 设置编辑时制表符占用空格数</span><br><span class="line">set tabstop=4</span><br><span class="line">&quot; 设置格式化时制表符占用空格数</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot; 让 vim 把连续数量的空格视为一个制表符</span><br><span class="line">set softtabstop=4</span><br><span class="line"></span><br><span class="line">&quot; 缩进可视化插件 Indent Guides</span><br><span class="line">&quot; 随 vim 自启动</span><br><span class="line">let g:indent_guides_enable_on_vim_startup=1</span><br><span class="line">&quot; 从第二层开始可视化显示缩进</span><br><span class="line">let g:indent_guides_start_level=2</span><br><span class="line">&quot; 色块宽度</span><br><span class="line">let g:indent_guides_guide_size=1</span><br><span class="line">&quot; 快捷键 i 开/关缩进可视化</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;i &lt;Plug&gt;IndentGuidesToggle</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 代码折叠</span><br><span class="line"></span><br><span class="line">&quot; 基于缩进或语法进行代码折叠</span><br><span class="line">&quot;set foldmethod=indent</span><br><span class="line">set foldmethod=syntax</span><br><span class="line">&quot; 启动 vim 时关闭折叠代码</span><br><span class="line">set nofoldenable</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 接口与实现快速切换</span><br><span class="line"></span><br><span class="line">&quot; *.cpp 和 *.h 间切换</span><br><span class="line">nmap &lt;silent&gt; &lt;Leader&gt;sw :FSHere&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 代码收藏</span><br><span class="line"></span><br><span class="line">&quot; 自定义 vim-signature 快捷键</span><br><span class="line">let g:SignatureMap = &#123;</span><br><span class="line">        \ &apos;Leader&apos;             :  &quot;m&quot;,</span><br><span class="line">        \ &apos;PlaceNextMark&apos;      :  &quot;m,&quot;,</span><br><span class="line">        \ &apos;ToggleMarkAtLine&apos;   :  &quot;m.&quot;,</span><br><span class="line">        \ &apos;PurgeMarksAtLine&apos;   :  &quot;m-&quot;,</span><br><span class="line">        \ &apos;DeleteMark&apos;         :  &quot;dm&quot;,</span><br><span class="line">        \ &apos;PurgeMarks&apos;         :  &quot;mda&quot;,</span><br><span class="line">        \ &apos;PurgeMarkers&apos;       :  &quot;m&lt;BS&gt;&quot;,</span><br><span class="line">        \ &apos;GotoNextLineAlpha&apos;  :  &quot;&apos;]&quot;,</span><br><span class="line">        \ &apos;GotoPrevLineAlpha&apos;  :  &quot;&apos;[&quot;,</span><br><span class="line">        \ &apos;GotoNextSpotAlpha&apos;  :  &quot;`]&quot;,</span><br><span class="line">        \ &apos;GotoPrevSpotAlpha&apos;  :  &quot;`[&quot;,</span><br><span class="line">        \ &apos;GotoNextLineByPos&apos;  :  &quot;]&apos;&quot;,</span><br><span class="line">        \ &apos;GotoPrevLineByPos&apos;  :  &quot;[&apos;&quot;,</span><br><span class="line">        \ &apos;GotoNextSpotByPos&apos;  :  &quot;mn&quot;,</span><br><span class="line">        \ &apos;GotoPrevSpotByPos&apos;  :  &quot;mp&quot;,</span><br><span class="line">        \ &apos;GotoNextMarker&apos;     :  &quot;[+&quot;,</span><br><span class="line">        \ &apos;GotoPrevMarker&apos;     :  &quot;[-&quot;,</span><br><span class="line">        \ &apos;GotoNextMarkerAny&apos;  :  &quot;]=&quot;,</span><br><span class="line">        \ &apos;GotoPrevMarkerAny&apos;  :  &quot;[=&quot;,</span><br><span class="line">        \ &apos;ListLocalMarks&apos;     :  &quot;ms&quot;,</span><br><span class="line">        \ &apos;ListLocalMarkers&apos;   :  &quot;m?&quot;</span><br><span class="line">        \ &#125;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 标签列表</span><br><span class="line"></span><br><span class="line">&quot; 设置 tagbar 子窗口的位置出现在主编辑区的左边</span><br><span class="line">let tagbar_left=1</span><br><span class="line">&quot; 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag</span><br><span class="line">nnoremap &lt;Leader&gt;ilt :TagbarToggle&lt;CR&gt;</span><br><span class="line">&quot; 设置标签子窗口的宽度</span><br><span class="line">let tagbar_width=32</span><br><span class="line">&quot; tagbar 子窗口中不显示冗余帮助信息</span><br><span class="line">let g:tagbar_compact=1</span><br><span class="line">&quot; 设置 ctags 对哪些代码标识符生成标签</span><br><span class="line">let g:tagbar_type_cpp = &#123;</span><br><span class="line">     \ &apos;ctagstype&apos; : &apos;c++&apos;,</span><br><span class="line">     \ &apos;kinds&apos;     : [</span><br><span class="line">         \ &apos;c:classes:0:1&apos;,</span><br><span class="line">         \ &apos;d:macros:0:1&apos;,</span><br><span class="line">         \ &apos;e:enumerators:0:0&apos;, </span><br><span class="line">         \ &apos;f:functions:0:1&apos;,</span><br><span class="line">         \ &apos;g:enumeration:0:1&apos;,</span><br><span class="line">         \ &apos;l:local:0:1&apos;,</span><br><span class="line">         \ &apos;m:members:0:1&apos;,</span><br><span class="line">         \ &apos;n:namespaces:0:1&apos;,</span><br><span class="line">         \ &apos;p:functions_prototypes:0:1&apos;,</span><br><span class="line">         \ &apos;s:structs:0:1&apos;,</span><br><span class="line">         \ &apos;t:typedefs:0:1&apos;,</span><br><span class="line">         \ &apos;u:unions:0:1&apos;,</span><br><span class="line">         \ &apos;v:global:0:1&apos;,</span><br><span class="line">         \ &apos;x:external:0:1&apos;</span><br><span class="line">     \ ],</span><br><span class="line">     \ &apos;sro&apos;        : &apos;::&apos;,</span><br><span class="line">     \ &apos;kind2scope&apos; : &#123;</span><br><span class="line">         \ &apos;g&apos; : &apos;enum&apos;,</span><br><span class="line">         \ &apos;n&apos; : &apos;namespace&apos;,</span><br><span class="line">         \ &apos;c&apos; : &apos;class&apos;,</span><br><span class="line">         \ &apos;s&apos; : &apos;struct&apos;,</span><br><span class="line">         \ &apos;u&apos; : &apos;union&apos;</span><br><span class="line">     \ &#125;,</span><br><span class="line">     \ &apos;scope2kind&apos; : &#123;</span><br><span class="line">         \ &apos;enum&apos;      : &apos;g&apos;,</span><br><span class="line">         \ &apos;namespace&apos; : &apos;n&apos;,</span><br><span class="line">         \ &apos;class&apos;     : &apos;c&apos;,</span><br><span class="line">         \ &apos;struct&apos;    : &apos;s&apos;,</span><br><span class="line">         \ &apos;union&apos;     : &apos;u&apos;</span><br><span class="line">     \ &#125;</span><br><span class="line">\ &#125;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 代码导航</span><br><span class="line"> </span><br><span class="line">&quot; 基于标签的代码导航</span><br><span class="line"></span><br><span class="line">&quot; 设置插件 indexer 调用 ctags 的参数</span><br><span class="line">&quot; 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+l+p+x+c+d+e+f+g+m+n+s+t+u+v</span><br><span class="line">&quot; 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl</span><br><span class="line">let g:indexer_ctagsCommandLineOptions=&quot;--c++-kinds=+l+p+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q&quot;</span><br><span class="line"></span><br><span class="line">&quot; 正向遍历同名标签</span><br><span class="line">nmap &lt;Leader&gt;tn :tnext&lt;CR&gt;</span><br><span class="line">&quot; 反向遍历同名标签</span><br><span class="line">nmap &lt;Leader&gt;tp :tprevious&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; 基于语义的代码导航</span><br><span class="line"></span><br><span class="line">nnoremap &lt;leader&gt;jc :YcmCompleter GoToDeclaration&lt;CR&gt;</span><br><span class="line">&quot; 只能是 #include 或已打开的文件</span><br><span class="line">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinition&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 查找</span><br><span class="line"></span><br><span class="line">&quot; 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project</span><br><span class="line">nnoremap &lt;Leader&gt;sp :CtrlSF&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 内容替换</span><br><span class="line"></span><br><span class="line">&quot; 快捷替换</span><br><span class="line">let g:multi_cursor_next_key=&apos;&lt;S-n&gt;&apos;</span><br><span class="line">let g:multi_cursor_skip_key=&apos;&lt;S-k&gt;&apos;</span><br><span class="line"></span><br><span class="line">&quot; 精准替换</span><br><span class="line">&quot; 替换函数。参数说明：</span><br><span class="line">&quot; confirm：是否替换前逐一确认</span><br><span class="line">&quot; wholeword：是否整词匹配</span><br><span class="line">&quot; replace：被替换字符串</span><br><span class="line">function! Replace(confirm, wholeword, replace)</span><br><span class="line">    wa</span><br><span class="line">    let flag = &apos;&apos;</span><br><span class="line">    if a:confirm</span><br><span class="line">        let flag .= &apos;gec&apos;</span><br><span class="line">    else</span><br><span class="line">        let flag .= &apos;ge&apos;</span><br><span class="line">    endif</span><br><span class="line">    let search = &apos;&apos;</span><br><span class="line">    if a:wholeword</span><br><span class="line">        let search .= &apos;\&lt;&apos; . escape(expand(&apos;&lt;cword&gt;&apos;), &apos;/\.*$^~[&apos;) . &apos;\&gt;&apos;</span><br><span class="line">    else</span><br><span class="line">        let search .= expand(&apos;&lt;cword&gt;&apos;)</span><br><span class="line">    endif</span><br><span class="line">    let replace = escape(a:replace, &apos;/\&amp;~&apos;)</span><br><span class="line">    execute &apos;argdo %s/&apos; . search . &apos;/&apos; . replace . &apos;/&apos; . flag . &apos;| update&apos;</span><br><span class="line">endfunction</span><br><span class="line">&quot; 不确认、非整词</span><br><span class="line">nnoremap &lt;Leader&gt;R :call Replace(0, 0, input(&apos;Replace &apos;.expand(&apos;&lt;cword&gt;&apos;).&apos; with: &apos;))&lt;CR&gt;</span><br><span class="line">&quot; 不确认、整词</span><br><span class="line">nnoremap &lt;Leader&gt;rw :call Replace(0, 1, input(&apos;Replace &apos;.expand(&apos;&lt;cword&gt;&apos;).&apos; with: &apos;))&lt;CR&gt;</span><br><span class="line">&quot; 确认、非整词</span><br><span class="line">nnoremap &lt;Leader&gt;rc :call Replace(1, 0, input(&apos;Replace &apos;.expand(&apos;&lt;cword&gt;&apos;).&apos; with: &apos;))&lt;CR&gt;</span><br><span class="line">&quot; 确认、整词</span><br><span class="line">nnoremap &lt;Leader&gt;rcw :call Replace(1, 1, input(&apos;Replace &apos;.expand(&apos;&lt;cword&gt;&apos;).&apos; with: &apos;))&lt;CR&gt;</span><br><span class="line">nnoremap &lt;Leader&gt;rwc :call Replace(1, 1, input(&apos;Replace &apos;.expand(&apos;&lt;cword&gt;&apos;).&apos; with: &apos;))&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; 模板补全</span><br><span class="line">&quot; UltiSnips 的 tab 键与 YCM 冲突，重新设定</span><br><span class="line">let g:UltiSnipsSnippetDirectories=[&quot;mysnippets&quot;]</span><br><span class="line">let g:UltiSnipsExpandTrigger=&quot;&lt;leader&gt;&lt;tab&gt;&quot;</span><br><span class="line">let g:UltiSnipsJumpForwardTrigger=&quot;&lt;leader&gt;&lt;tab&gt;&quot;</span><br><span class="line">let g:UltiSnipsJumpBackwardTrigger=&quot;&lt;leader&gt;&lt;s-tab&gt;&quot;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; YCM 补全</span><br><span class="line"></span><br><span class="line">&quot; YCM 补全菜单配色</span><br><span class="line">&quot; 菜单</span><br><span class="line">highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5</span><br><span class="line">&quot; 选中项</span><br><span class="line">highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900</span><br><span class="line"></span><br><span class="line">&quot; 补全功能在注释中同样有效</span><br><span class="line">let g:ycm_complete_in_comments=1</span><br><span class="line"></span><br><span class="line">&quot; 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示</span><br><span class="line">let g:ycm_confirm_extra_conf=0</span><br><span class="line"></span><br><span class="line">&quot; 开启 YCM 标签补全引擎</span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files=0</span><br><span class="line">&quot;&quot; 引入 C++ 标准库 tags</span><br><span class="line">&quot;set tags+=/data/misc/software/app/vim/stdcpp.tags</span><br><span class="line">&quot;set tags+=/data/misc/software/app/vim/sys.tags</span><br><span class="line"></span><br><span class="line">&quot; YCM 集成 OmniCppComplete 补全引擎，设置其快捷键</span><br><span class="line">inoremap &lt;leader&gt;; &lt;C-x&gt;&lt;C-o&gt;</span><br><span class="line"></span><br><span class="line">&quot; 补全内容不以分割子窗口形式出现，只显示补全列表</span><br><span class="line">set completeopt-=preview</span><br><span class="line"></span><br><span class="line">&quot; 从第一个键入字符就开始罗列匹配项</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion=1</span><br><span class="line"></span><br><span class="line">&quot; 禁止缓存匹配项，每次都重新生成匹配项</span><br><span class="line">let g:ycm_cache_omnifunc=0</span><br><span class="line"></span><br><span class="line">&quot; 语法关键字补全</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax=1</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"> </span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 由接口快速生成实现框架</span><br><span class="line"></span><br><span class="line">&quot; 成员函数的实现顺序与声明顺序一致</span><br><span class="line">let g:disable_protodef_sorting=1</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 库信息参考</span><br><span class="line"> </span><br><span class="line">&quot; 启用:Man命令查看各类man信息</span><br><span class="line">source $VIMRUNTIME/ftplugin/man.vim</span><br><span class="line"></span><br><span class="line">&quot; 定义:Man命令查看各类man信息的快捷键</span><br><span class="line">nmap &lt;Leader&gt;man :Man 3 &lt;cword&gt;&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 工程文件浏览</span><br><span class="line"></span><br><span class="line">&quot; 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list</span><br><span class="line">nmap &lt;Leader&gt;fl :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">&quot; 设置 NERDTree 子窗口宽度</span><br><span class="line">let NERDTreeWinSize=22</span><br><span class="line">&quot; 设置 NERDTree 子窗口位置</span><br><span class="line">let NERDTreeWinPos=&quot;right&quot;</span><br><span class="line">&quot; 显示隐藏文件</span><br><span class="line">let NERDTreeShowHidden=1</span><br><span class="line">&quot; NERDTree 子窗口中不显示冗余帮助信息</span><br><span class="line">let NERDTreeMinimalUI=1</span><br><span class="line">&quot; 删除文件时自动删除文件对应 buffer</span><br><span class="line">let NERDTreeAutoDeleteBuffer=1</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 多文档编辑</span><br><span class="line"> </span><br><span class="line">&quot; 显示/隐藏 MiniBufExplorer 窗口</span><br><span class="line">map &lt;Leader&gt;bl :MBEToggle&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; buffer 切换快捷键</span><br><span class="line">map &lt;C-Tab&gt; :MBEbn&lt;cr&gt;</span><br><span class="line">map &lt;C-S-Tab&gt; :MBEbp&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 环境恢复</span><br><span class="line"></span><br><span class="line">&quot; 设置环境保存项</span><br><span class="line">set sessionoptions=&quot;blank,globals,localoptions,tabpages,sesdir,folds,help,options,resize,winpos,winsize&quot;</span><br><span class="line"></span><br><span class="line">&quot; 保存 undo 历史。必须先行创建 .undo_history/</span><br><span class="line">set undodir=~/.undo_history/</span><br><span class="line">set undofile</span><br><span class="line"></span><br><span class="line">&quot; 保存快捷键</span><br><span class="line">&quot;map &lt;leader&gt;ss :mksession! my.vim&lt;cr&gt; :wviminfo! my.viminfo&lt;cr&gt;</span><br><span class="line">map &lt;leader&gt;ss :mksession! my.vim&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; 恢复快捷键</span><br><span class="line">&quot;map &lt;leader&gt;rs :source my.vim&lt;cr&gt; :rviminfo my.viminfo&lt;cr&gt;</span><br><span class="line">map &lt;leader&gt;rs :source my.vim&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"> </span><br><span class="line">&quot; 设置快捷键实现一键编译及运行</span><br><span class="line">nmap &lt;Leader&gt;m :wa&lt;CR&gt; :cd build/&lt;CR&gt; :!rm -rf main&lt;CR&gt; :!cmake CMakeLists.txt&lt;CR&gt;:make&lt;CR&gt;&lt;CR&gt; :cw&lt;CR&gt; :cd ..&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;g :wa&lt;CR&gt;:cd build/&lt;CR&gt;:!rm -rf main&lt;CR&gt;:!cmake CMakeLists.txt&lt;CR&gt;:make&lt;CR&gt;&lt;CR&gt;:cw&lt;CR&gt;:cd ..&lt;CR&gt;:!build/main&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; &gt;&gt;</span><br><span class="line">&quot; 快速选中结对符内的文本</span><br><span class="line"> </span><br><span class="line">&quot; 快捷键</span><br><span class="line">map &lt;SPACE&gt; &lt;Plug&gt;(wildfire-fuel)</span><br><span class="line">vmap &lt;S-SPACE&gt; &lt;Plug&gt;(wildfire-water)</span><br><span class="line"></span><br><span class="line">&quot; 适用于哪些结对符</span><br><span class="line">let g:wildfire_objects = [&quot;i&apos;&quot;, &apos;i&quot;&apos;, &quot;i)&quot;, &quot;i]&quot;, &quot;i&#125;&quot;, &quot;i&gt;&quot;, &quot;ip&quot;]</span><br><span class="line"></span><br><span class="line">&quot; &lt;&lt;</span><br><span class="line"></span><br><span class="line">&quot; 调用 gundo 树</span><br><span class="line">nnoremap &lt;Leader&gt;ud :GundoToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>EOF.</p><p>对于 vi/vim 只是点评一点：这是一个你不需要使用鼠标，不需使用小键盘，只需要使用大键盘就可以完成很多复杂功能文本编辑的编辑器。</p><p>好多多数人都觉得有IDE就够了，可是……</p><p>多数时候服务器上，还是shell好用啊.(笑)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vim 的学习曲线相当的大（参看耗子叔&lt;a href=&quot;https://coolshell.cn/articles/3125.html&quot; title=&quot;主流文本编辑器学习曲线&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;各种文本编辑器的学习曲线&lt;/a&gt;）
      
    
    </summary>
    
    
      <category term="crash course" scheme="https://m12r3dx.github.io/tags/crash-course/"/>
    
  </entry>
  
  <entry>
    <title>&lt;原则&gt;书摘</title>
    <link href="https://m12r3dx.github.io/2018/11/07/life/"/>
    <id>https://m12r3dx.github.io/2018/11/07/life/</id>
    <published>2018-11-07T14:27:22.000Z</published>
    <updated>2019-05-17T09:24:42.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最高原则"><a href="#最高原则" class="headerlink" title="最高原则"></a>最高原则</h2><ul><li>独立思考并决定：<br>（1）你想要什么；<br>（2）事实是什么；<br>（3）面对事实，你如何实现自己的愿望，而且要保持谦逊和心胸开阔，以便你能动用自己的最佳思维。</li><li>考察影响你的那些事物的规律，从而理解其背后的因果关系，并学习有效应对这些事物的原则。</li></ul><h2 id="1-拥抱现实，应对现实"><a href="#1-拥抱现实，应对现实" class="headerlink" title="1.拥抱现实，应对现实"></a>1.拥抱现实，应对现实</h2><ul><li><h4 id="1-1做一个超级现实的人"><a href="#1-1做一个超级现实的人" class="headerlink" title="1.1做一个超级现实的人"></a>1.1做一个超级现实的人</h4><p>a. 梦想+现实+决心=成功的生活。</p></li><li><h4 id="1-2真相（或者更精确地说，对现实的准确理解）是任何良好结果的根本依据"><a href="#1-2真相（或者更精确地说，对现实的准确理解）是任何良好结果的根本依据" class="headerlink" title="1.2真相（或者更精确地说，对现实的准确理解）是任何良好结果的根本依据"></a>1.2真相（或者更精确地说，对现实的准确理解）是任何良好结果的根本依据</h4></li><li><h4 id="1-3做到头脑极度开放、极度透明"><a href="#1-3做到头脑极度开放、极度透明" class="headerlink" title="1.3做到头脑极度开放、极度透明"></a>1.3做到头脑极度开放、极度透明</h4><p>a. 对于快速学习和有效改变而言，头脑极度开放、极度透明是价值无限的。</p><p>b. 不要担心其他人的看法，使之成为你的障碍。</p><p>c. 拥抱极度求真和极度透明将带来更有意义的工作和更有意义的人际关系。</p></li><li><h4 id="1-4观察自然，学习现实规律"><a href="#1-4观察自然，学习现实规律" class="headerlink" title="1.4观察自然，学习现实规律"></a>1.4观察自然，学习现实规律</h4><p>a. 不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况。</p><p>b. 一个东西要“好”，就必须符合现实的规律，并促进整体的进化，这能带来最大的回报。</p><p>c. 进化是宇宙中最强大的力量，是唯一永恒的东西，是一切的驱动力。</p><p>d. 不进化就死亡。</p></li><li><h4 id="1-5进化是生命最大的成就和最大的回报"><a href="#1-5进化是生命最大的成就和最大的回报" class="headerlink" title="1.5进化是生命最大的成就和最大的回报"></a>1.5进化是生命最大的成就和最大的回报</h4><p>a. 个体的激励机制必须符合群体的目标。</p><p>b. 现实为了整体而趋向最优化，而不是为了个体。</p><p>c. 通过快速试错以适应现实是无价的。</p><p>d. 意识到你既是一切又什么都不是，并决定你想成为什么样子。</p><p>e. 你的未来取决于你的视角。</p></li><li><h4 id="1-6理解自然提供的现实教训"><a href="#1-6理解自然提供的现实教训" class="headerlink" title="1.6理解自然提供的现实教训"></a>1.6理解自然提供的现实教训</h4><p>a. 把你的进化最大化。</p><p>b. 记住“没有痛苦就没有收获”。</p><p>c. 自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的。</p></li><li><h4 id="1-7痛苦-反思-进步"><a href="#1-7痛苦-反思-进步" class="headerlink" title="1.7痛苦+反思=进步"></a>1.7痛苦+反思=进步</h4><p>a. 迎接而非躲避痛苦。</p><p>b. 接受严厉的爱。</p></li><li><h4 id="1-8考虑后续与再后续的结果"><a href="#1-8考虑后续与再后续的结果" class="headerlink" title="1.8考虑后续与再后续的结果"></a>1.8考虑后续与再后续的结果</h4></li><li><h4 id="1-9接受结果"><a href="#1-9接受结果" class="headerlink" title="1.9接受结果"></a>1.9接受结果</h4></li><li><h4 id="1-10从更高的层次俯视机器"><a href="#1-10从更高的层次俯视机器" class="headerlink" title="1.10从更高的层次俯视机器"></a>1.10从更高的层次俯视机器</h4><p>a. 把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果。</p><p>b. 通过比较你实现的结果和你的目标，你就能确定如何改进你的机器。</p><p>c. 区别作为机器设计者的你和作为机器中工作者的你。</p><p>d. 大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上。</p><p>e. 成功的人能超越自身，客观看待事物，并管理事物以塑造改变。</p><p>f. 在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事。</p><p>g. 因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据。</p><p>h. 如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望。</p></li></ul><h2 id="2-用五步流程实现你的人生愿望"><a href="#2-用五步流程实现你的人生愿望" class="headerlink" title="2.用五步流程实现你的人生愿望"></a>2.用五步流程实现你的人生愿望</h2><ul><li><h4 id="2-1有明确的目标"><a href="#2-1有明确的目标" class="headerlink" title="2.1有明确的目标"></a>2.1有明确的目标</h4><p>a. 排列优先顺序：尽管你几乎可以得到你想要的任何东西，但你不可能得到你想要的所有东西。</p><p>b. 不要混淆目标和欲望。</p><p>c. 调和你的目标和欲望，以明确你在生活中真正想要的东西。</p><p>d. 不要把成功的装饰误认为成功本身。</p><p>e. 永远不要因为你觉得某个目标无法实现就否决它。</p><p>f. 谨记伟大的期望创造伟大的能力。</p><p>g. 如果你拥有灵活性并自我归责，那么几乎没有什么能阻止你成功。</p><p>h. 知道如何对待挫折和知道如何前进一样重要。</p></li><li><h4 id="2-2找出问题，并且不容忍问题"><a href="#2-2找出问题，并且不容忍问题" class="headerlink" title="2.2找出问题，并且不容忍问题"></a>2.2找出问题，并且不容忍问题</h4><p>a. 把令人痛苦的问题视为考验你的潜在进步机会。</p><p>b. 不要逃避问题，因为问题根植于看起来并不美好的残酷现实。</p><p>c. 要精准地找到问题所在。</p><p>d. 不要把问题的某个原因误认为问题本身。</p><p>e. 区分大问题和小问题。</p><p>f. 找出一个问题之后，不要容忍问题。</p></li><li><h4 id="2-3诊断问题，找到问题的根源"><a href="#2-3诊断问题，找到问题的根源" class="headerlink" title="2.3诊断问题，找到问题的根源"></a>2.3诊断问题，找到问题的根源</h4><p>a. 先把问题是什么弄明白，再决定怎么做。</p><p>b. 区分直接原因和根本原因。</p><p>c. 认识到了解人（包括你自己）的特性，有助于对其形成合理预期。</p></li><li><h4 id="2-4规划方案"><a href="#2-4规划方案" class="headerlink" title="2.4规划方案"></a>2.4规划方案</h4><p>a. 前进之前先回顾。</p><p>b. 把你的问题看作一部机器产生的一系列结果。</p><p>c. 谨记实现你的目标通常有很多途径。</p><p>d. 把你的方案设想为一个电影剧本，然后循序渐进地思考由谁来做什么事。</p><p>e. 把你的方案写下来，让所有人都能看到，并对照方案执行。</p><p>f. 要明白，规划一个好方案不一定需要很多时间。</p></li><li><h4 id="2-5坚定地从头至尾执行方案"><a href="#2-5坚定地从头至尾执行方案" class="headerlink" title="2.5坚定地从头至尾执行方案"></a>2.5坚定地从头至尾执行方案</h4><p>a. 规划做得再好，不执行也无济于事。</p><p>b. 良好工作习惯的重要性常被大大低估。</p><p>c. 建立清晰的衡量标准来确保你在严格执行方案。</p></li><li><h4 id="2-6谨记：如果你找到了解决方案，弱点是不重要的"><a href="#2-6谨记：如果你找到了解决方案，弱点是不重要的" class="headerlink" title="2.6谨记：如果你找到了解决方案，弱点是不重要的"></a>2.6谨记：如果你找到了解决方案，弱点是不重要的</h4><p>a. 考察你犯错误的类型，并识别你通常在五步流程中的哪一步上做得不好。</p><p>b. 每个人都至少有一个最大的弱点阻碍其成功，找到你的这个弱点并处理它。</p></li><li><h4 id="2-7理解你和其他人的“意境地图”与谦逊性"><a href="#2-7理解你和其他人的“意境地图”与谦逊性" class="headerlink" title="2.7理解你和其他人的“意境地图”与谦逊性"></a>2.7理解你和其他人的“意境地图”与谦逊性</h4></li></ul><h2 id="3-做到头脑极度开放"><a href="#3-做到头脑极度开放" class="headerlink" title="3.做到头脑极度开放"></a>3.做到头脑极度开放</h2><ul><li><h4 id="3-1认识你的两大障碍"><a href="#3-1认识你的两大障碍" class="headerlink" title="3.1认识你的两大障碍"></a>3.1认识你的两大障碍</h4><p>a. 理解你的自我意识障碍。</p><p>b. “两个你”在争夺对你的控制权。</p><p>c. 理解你的思维盲点障碍。</p></li><li><h4 id="3-2奉行头脑极度开放"><a href="#3-2奉行头脑极度开放" class="headerlink" title="3.2奉行头脑极度开放"></a>3.2奉行头脑极度开放</h4><p>a. 诚恳地相信你也许并不知道最好的解决办法是什么，并认识到，与你知道的东西相比，能不能妥善处理“不知道”才是更重要的。</p><p>b. 认识到决策应当分成两步：先分析所有相关信息，然后决定。</p><p>c. 不要担心自己的形象，只关心如何实现目标。</p><p>d. 认识到你不能“只产出不吸纳”。</p><p>e. 认识到为了能够从他人的角度看待事物，你必须暂时悬置判断，只有设身处地，你才能合理评估另一种观点的价值。</p><p>f. 谨记，你是在寻找最好的答案，而不是你自己能得出的最好答案。</p><p>g. 搞清楚你是在争论还是在试图理解一个问题，并根据你和对方的可信度，想想哪种做法最合理。</p></li></ul><h2 id="4-理解人与人大不相同"><a href="#4-理解人与人大不相同" class="headerlink" title="4.理解人与人大不相同"></a>4.理解人与人大不相同</h2><ul><li><h4 id="4-1明白你与其他人的思维方式能带来的力量"><a href="#4-1明白你与其他人的思维方式能带来的力量" class="headerlink" title="4.1明白你与其他人的思维方式能带来的力量"></a>4.1明白你与其他人的思维方式能带来的力量</h4><p>a. 我们拥有各种天生特征，既可能帮助自己也可能伤害自己，取决于如何应用。</p></li><li><h4 id="4-2有意义的工作和有意义的人际关系不仅是我们做出的美好选择，而且是我们天生的生理需求"><a href="#4-2有意义的工作和有意义的人际关系不仅是我们做出的美好选择，而且是我们天生的生理需求" class="headerlink" title="4.2有意义的工作和有意义的人际关系不仅是我们做出的美好选择，而且是我们天生的生理需求"></a>4.2有意义的工作和有意义的人际关系不仅是我们做出的美好选择，而且是我们天生的生理需求</h4></li><li><h4 id="4-3理解大脑里的主要斗争，以及如何控制这些斗争，以实现“你”的愿望"><a href="#4-3理解大脑里的主要斗争，以及如何控制这些斗争，以实现“你”的愿望" class="headerlink" title="4.3理解大脑里的主要斗争，以及如何控制这些斗争，以实现“你”的愿望"></a>4.3理解大脑里的主要斗争，以及如何控制这些斗争，以实现“你”的愿望</h4><p>a. 要明白，意识与潜意识在不断斗争。</p><p>b. 要知道最常发生的斗争是情绪和思考的斗争。</p><p>c. 调和你的情绪和思考。</p><p>d. 善择你的习惯。</p><p>e. 坚持友善地训练“较低层次的你”，以养成好的习惯。</p><p>f. 理解右脑思维和左脑思维的差别。</p><p>g. 理解大脑可以改变的程度。</p></li><li><h4 id="4-4认识自己和他人的特性"><a href="#4-4认识自己和他人的特性" class="headerlink" title="4.4认识自己和他人的特性"></a>4.4认识自己和他人的特性</h4><p>a. 内向与外向。</p><p>b. 直觉与感知。</p><p>c. 思考与感觉。</p><p>d. 计划与发觉。</p><p>e. 创造者、推进者、改进者、贯彻者与变通者。</p><p>f. 关注任务与关注目标。</p><p>g. 职场人格量表。</p><p>h. 塑造者是能从构想一路走到构想实现的人。</p></li><li><h4 id="4-5无论你要实现什么目标，让合适的人各司其职以支持你的目标，是成功的关键"><a href="#4-5无论你要实现什么目标，让合适的人各司其职以支持你的目标，是成功的关键" class="headerlink" title="4.5无论你要实现什么目标，让合适的人各司其职以支持你的目标，是成功的关键"></a>4.5无论你要实现什么目标，让合适的人各司其职以支持你的目标，是成功的关键</h4><p>a. 管理你自己，并协调其他人实现你的目标。</p></li></ul><h2 id="5-学习如何有效决策"><a href="#5-学习如何有效决策" class="headerlink" title="5.学习如何有效决策"></a>5.学习如何有效决策</h2><ul><li><h4 id="5-1要认识到：（1）影响好决策的最大威胁是有害的情绪；（2）决策是一个两步流程（先了解后决定）"><a href="#5-1要认识到：（1）影响好决策的最大威胁是有害的情绪；（2）决策是一个两步流程（先了解后决定）" class="headerlink" title="5.1要认识到：（1）影响好决策的最大威胁是有害的情绪；（2）决策是一个两步流程（先了解后决定）"></a>5.1要认识到：（1）影响好决策的最大威胁是有害的情绪；（2）决策是一个两步流程（先了解后决定）</h4></li><li><h4 id="5-2综合分析眼前的形势"><a href="#5-2综合分析眼前的形势" class="headerlink" title="5.2综合分析眼前的形势"></a>5.2综合分析眼前的形势</h4><p>a. 你能做的最重要的决定之一是决定问谁。</p><p>b. 不要听到什么信什么。</p><p>c. 所有东西都是放在眼前看更大。</p><p>d. 不要夸大新东西的好处。</p><p>e. 不要过度分析细节。</p></li><li><h4 id="5-3综合分析变化中的形势"><a href="#5-3综合分析变化中的形势" class="headerlink" title="5.3综合分析变化中的形势"></a>5.3综合分析变化中的形势</h4><p>a. 始终记住改善事物的速度和水平，以及两者的关系。</p><p>b. 不必过于精确。</p><p>c. 谨记“80/20法则”，并明白关键性的“20%”是什么。</p><p>d. 不要做完美主义者。</p></li><li><h4 id="5-4高效地综合考虑各个层次"><a href="#5-4高效地综合考虑各个层次" class="headerlink" title="5.4高效地综合考虑各个层次"></a>5.4高效地综合考虑各个层次</h4><p>a. 用“基线以上”和“基线以下”来确定谈话位于哪一层。</p><p>b. 谨记，决策需要在合理的层次做出，但也应在各层次之间保持一致。</p></li><li><h4 id="5-5综合分析现实、理解如何行动的最好工具是逻辑、理性和常识"><a href="#5-5综合分析现实、理解如何行动的最好工具是逻辑、理性和常识" class="headerlink" title="5.5综合分析现实、理解如何行动的最好工具是逻辑、理性和常识"></a>5.5综合分析现实、理解如何行动的最好工具是逻辑、理性和常识</h4></li><li><h4 id="5-6根据预期价值计算做决策"><a href="#5-6根据预期价值计算做决策" class="headerlink" title="5.6根据预期价值计算做决策"></a>5.6根据预期价值计算做决策</h4><p>a. 不管你押对的概率已经有多大，提高你的押对概率始终有价值。</p><p>b. 知道什么时候不要去押注，和知道什么注值得押同样重要。</p><p>c. 最好的选择是好处多于坏处的选择，不是毫无坏处的选择。</p></li><li><h4 id="5-7比较更多信息带来的价值和不做决定造成的成本，决定优先顺序"><a href="#5-7比较更多信息带来的价值和不做决定造成的成本，决定优先顺序" class="headerlink" title="5.7比较更多信息带来的价值和不做决定造成的成本，决定优先顺序"></a>5.7比较更多信息带来的价值和不做决定造成的成本，决定优先顺序</h4><p>a. 先把你的“必做之事”做完，再做你的“想做之事”。</p><p>b. 你很可能没有时间处理不重要的事，那最好将它留着，以免自己没有时间处理重要的事。</p><p>c. 不要把概率当作可能性。</p></li><li><h4 id="5-8简化"><a href="#5-8简化" class="headerlink" title="5.8简化"></a>5.8简化</h4></li><li><h4 id="5-9使用原则"><a href="#5-9使用原则" class="headerlink" title="5.9使用原则"></a>5.9使用原则</h4></li><li><h4 id="5-10对你的决策进行可信度加权"><a href="#5-10对你的决策进行可信度加权" class="headerlink" title="5.10对你的决策进行可信度加权"></a>5.10对你的决策进行可信度加权</h4></li><li><h4 id="5-11把你的原则转换成算法，让计算机和你一起决策"><a href="#5-11把你的原则转换成算法，让计算机和你一起决策" class="headerlink" title="5.11把你的原则转换成算法，让计算机和你一起决策"></a>5.11把你的原则转换成算法，让计算机和你一起决策</h4></li><li><h4 id="5-12在深刻理解人工智能之前不要过度信赖它"><a href="#5-12在深刻理解人工智能之前不要过度信赖它" class="headerlink" title="5.12在深刻理解人工智能之前不要过度信赖它"></a>5.12在深刻理解人工智能之前不要过度信赖它</h4></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最高原则&quot;&gt;&lt;a href=&quot;#最高原则&quot; class=&quot;headerlink&quot; title=&quot;最高原则&quot;&gt;&lt;/a&gt;最高原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;独立思考并决定：&lt;br&gt;（1）你想要什么；&lt;br&gt;（2）事实是什么；&lt;br&gt;（3）面对事实，你如何实现自己的愿望
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>聊聊真实</title>
    <link href="https://m12r3dx.github.io/2018/11/04/truth/"/>
    <id>https://m12r3dx.github.io/2018/11/04/truth/</id>
    <published>2018-11-04T10:27:22.000Z</published>
    <updated>2019-05-17T09:24:42.677Z</updated>
    
    <content type="html"><![CDATA[<p>我自认为是一个喜欢读历史的人，在我过去的二十多年的人生中，我曾翻一边看着各种资料，一边在问<br>自己一个问题：究竟什么是真实？</p><p>事实上，在这个问题上，从来没有一个系统的评价标准，“记载的历史永远是一家之言”，这个问题困扰着我，<br>纠缠着我。我曾在无数个深夜中静坐，试图理出个头绪，最后我放弃了。不是因为我在故纸堆中迷失了，<br>而是当你系统的看一个问题时，你会发现在问题上，好人坏人似乎并不是那么重要。</p><p>这让我很困惑，从小到大我们受到的教育就是那种充满正义感的道德教育，包括我们的主旋律电影，<br>大多数时候一上来：“好人，坏人？”，好人就热泪盈眶，坏人就咬牙切齿。一场电影下来，好不快活<br>。可是这个结论让我发生了动摇，我决定从历史中抽身出来，这个时候</p><p>我读了柴静的《看见》。</p><p>《看见》给了我一种全新的视角，一种时代记录者的视角，一种完全不同于我所了解的视角。<br>透过这个视角，我可以看到新闻报道看不到的东西，那些实实在在的人，<br>那些形形色色的采访对象，平常我们都会觉得这是老师，杀人犯，黑社会，地方官员，<br>但到最后会发现，他们只是人，和我们其他人一样，会为了生存尽自己所能做好每一件事。</p><p>柴静的朋友说她：“从前你总说好人坏人，现在只说好事坏事，将来只是有事无事。”</p><p>我觉得这样挺好。</p><p>人们在社会中总是扮演不同的角色，对于我们来讲，真实从来都是一个相对的概念，他<br>不是纯粹客观的，而是相对客观的，扮演的角色不同，了解的也不同。<br>我们不是上帝，<br>全知全能的从来不是我们。</p><p>这让我想起美剧《疑犯追踪》里的Finch说过的:”尽管令人沮丧，有些问题可能永远不会有<br>答案。”真相永远是这么的优雅与残酷，就像无底洞的底一样，你唯有不断地探索<br>才能接近事情的真实一面，但是真实的情况从来不只一面，人就在这其中艰难的跋涉。</p><p>套用大老师的话:“我并非想要他人的理解，我知道自己并不会被他人所理解，也不想要<br>得到理解。我追求的是更加过分的，残酷的东西。我想去理解，想要理解，想要了解，<br>并安下心来。”</p><p>纯粹的真实是很伤人的，但我并不畏惧，也不太在乎别人的目光，追求真相是艰难的跋涉，<br>我不敢说如何，但是我有些懂了。要了解一个人，一件事的真实，在要不断的探寻的同时，<br>也要有永远得不到答案的觉悟，真相总是在事实反复的交错中给你露出一点点，<br>稍有不慎，就会流失在涕泪交加中。</p><p>​在这个时代独能立思考是一件代价很高的事情，但是这种能力永远不要放弃。<br>我觉得唯有如此，才能在纷繁复杂的迷雾下，得以窥见一点真实。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我自认为是一个喜欢读历史的人，在我过去的二十多年的人生中，我曾翻一边看着各种资料，一边在问&lt;br&gt;自己一个问题：究竟什么是真实？&lt;/p&gt;
&lt;p&gt;事实上，在这个问题上，从来没有一个系统的评价标准，“记载的历史永远是一家之言”，这个问题困扰着我，&lt;br&gt;纠缠着我。我曾在无数个深
      
    
    </summary>
    
    
      <category term="Memo" scheme="https://m12r3dx.github.io/tags/Memo/"/>
    
  </entry>
  
  <entry>
    <title>RE速查表</title>
    <link href="https://m12r3dx.github.io/2018/06/27/re-cheat/"/>
    <id>https://m12r3dx.github.io/2018/06/27/re-cheat/</id>
    <published>2018-06-26T17:27:22.000Z</published>
    <updated>2019-09-08T12:32:56.082Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><table><thead><tr><th style="text-align:left">按键</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:left">Space</td><td>切换显示</td></tr><tr><td style="text-align:left">C</td><td>转换为代码</td></tr><tr><td style="text-align:left">D</td><td>转换为数据</td></tr><tr><td style="text-align:left">A</td><td>转换为字符</td></tr><tr><td style="text-align:left">*</td><td>转换为数组</td></tr><tr><td style="text-align:left">U</td><td>未定义</td></tr><tr><td style="text-align:left">O</td><td>提取偏移量</td></tr><tr><td style="text-align:left">H</td><td>立即数-&gt;DEC</td></tr><tr><td style="text-align:left">R</td><td>立即数-&gt;STR</td></tr><tr><td style="text-align:left">B</td><td>立即数-&gt;BIN</td></tr><tr><td style="text-align:left">Q</td><td>立即数-&gt;HEX</td></tr><tr><td style="text-align:left">N</td><td>标签重命名</td></tr><tr><td style="text-align:left">?</td><td>计算器</td></tr><tr><td style="text-align:left">G</td><td>跳转到地址</td></tr><tr><td style="text-align:left">:</td><td>注释</td></tr><tr><td style="text-align:left">Ctrl+X</td><td>查看参考[显示栈]</td></tr><tr><td style="text-align:left">X</td><td>查看参考</td></tr><tr><td style="text-align:left">Art+I</td><td>搜索常量</td></tr><tr><td style="text-align:left">Ctrl+I</td><td>再次搜索常量</td></tr><tr><td style="text-align:left">Art+B</td><td>搜索Byte</td></tr><tr><td style="text-align:left">Ctrl+B</td><td>再次搜索Byte</td></tr><tr><td style="text-align:left">Art+T</td><td>搜索文本</td></tr><tr><td style="text-align:left">Ctrl+T</td><td>搜索下一个</td></tr><tr><td style="text-align:left">Art+P</td><td>编辑当前函数</td></tr><tr><td style="text-align:left">Enter</td><td>跳转</td></tr><tr><td style="text-align:left">Esc</td><td>返回</td></tr><tr><td style="text-align:left">NUM -</td><td>收缩</td></tr><tr><td style="text-align:left">NUM +</td><td>展开</td></tr><tr><td style="text-align:left">F5</td><td>以伪代码模式显示</td></tr></tbody></table><h3 id="OllyDBG"><a href="#OllyDBG" class="headerlink" title="OllyDBG"></a>OllyDBG</h3><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>F7</td><td>单步进入</td></tr><tr><td>F8</td><td>单步步过</td></tr><tr><td>F9</td><td>执行至点</td></tr><tr><td>Ctrl+F2</td><td>重载程序</td></tr></tbody></table><h3 id="MSVC"><a href="#MSVC" class="headerlink" title="MSVC"></a>MSVC</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>/O1</td><td>创建尺寸最小文件</td></tr><tr><td>/Ob0</td><td>禁止内敛展开</td></tr><tr><td>/Ox</td><td>启用内存优化</td></tr><tr><td>/GS-</td><td>禁用安全检查</td></tr><tr><td>/Fa(file)</td><td>创建汇编文件</td></tr><tr><td>/Zi</td><td>生成调试信息</td></tr><tr><td>/Zp(n)</td><td>使封装结构体向n字节边界对齐</td></tr><tr><td>/MD</td><td>使可执行文件使用MSVCR*.DLL</td></tr></tbody></table><h3 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-Os</td><td>优化目标文件大小</td></tr><tr><td>-O3</td><td>打开所有-O2的优化选项</td></tr><tr><td>-regparm=</td><td>设定传参的寄存器数量</td></tr><tr><td>-o file</td><td>制定输出文件名</td></tr><tr><td>-g</td><td>产生有调试信息的代码</td></tr><tr><td>-S</td><td>仅编译到汇编指令，不进行汇编和链接</td></tr><tr><td>-masm=intel</td><td>汇编指令使用intel语法</td></tr><tr><td>-fno-inline</td><td>禁止内联函数</td></tr></tbody></table><h3 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>break filename.c:num</td><td>在源程序第几行设置断点</td></tr><tr><td>break function</td><td>函数入口设置断点</td></tr><tr><td>break *address</td><td>某地址断点</td></tr><tr><td>b</td><td>同break</td></tr><tr><td>p variable</td><td>显示变量的值</td></tr><tr><td>run/r</td><td>运行</td></tr><tr><td>cont</td><td>继续运行</td></tr><tr><td>c</td><td>同上</td></tr><tr><td>bt</td><td>打印当前栈所有信息</td></tr><tr><td>set disassembly-flavor intel</td><td>英特尔语法</td></tr><tr><td>disas</td><td>查看当前函数汇编指令</td></tr><tr><td>disas function</td><td>查看函数汇编指令</td></tr><tr><td>disas function,+50</td><td>查看函数的部分汇编指令</td></tr><tr><td>disas $eip,+0x10</td><td>查看函数的几条汇编指令</td></tr><tr><td>disas/r</td><td>查看接下来的几条</td></tr><tr><td>info registers</td><td>查看opcode</td></tr><tr><td>info float</td><td>查看CPU</td></tr><tr><td>info locals</td><td>查看FPU</td></tr><tr><td>x/w …</td><td>列出全局变量</td></tr><tr><td>x/w $rdi…</td><td>读内存，word型</td></tr><tr><td>x/10w…</td><td>从RDI指定地址读数，word型</td></tr><tr><td>x/s…</td><td>读取并显示为10个word型</td></tr><tr><td>x/i…</td><td>读取内存，并显示为字符串</td></tr><tr><td>x/10c…</td><td>~，并显示为汇编</td></tr><tr><td>x/b…</td><td>~，并显示10个字符</td></tr><tr><td>x/h…</td><td>~，并显示为byte</td></tr><tr><td>x/g…</td><td>读取并显示16位halfword型数据</td></tr><tr><td>finish</td><td>读取并显示giant words(64 bits)</td></tr><tr><td>next</td><td>执行到函数退出</td></tr><tr><td>step</td><td>单步语句(不步入)</td></tr><tr><td>set step-mode on</td><td>单步步入跟踪调试</td></tr><tr><td>frame n</td><td>打开step-mode</td></tr><tr><td>info break</td><td>切换栈帧</td></tr><tr><td>del n</td><td>查看断点</td></tr><tr><td>set args…</td><td>删除断点</td></tr></tbody></table><h3 id="PEDA"><a href="#PEDA" class="headerlink" title="PEDA"></a>PEDA</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>aslr</td><td>显示/设定GDB的ASLR(地址空间配置随机加载)</td></tr><tr><td>checksec</td><td>[!]检查二进制文件的各种安全选项</td></tr><tr><td>dumpargs</td><td>函数将要被调用时，显示将要被传入函数的所有参数(默认会在反汇编代码下方自动显示)</td></tr><tr><td>dumprop</td><td>在给定内存范围中Dump出所有ROP gadgets</td></tr><tr><td>elfsymbol</td><td>获取elf的plt表</td></tr><tr><td>elfheader</td><td>获得调试的elf的头信息</td></tr><tr><td>lookup</td><td>搜索内存区间内的地址</td></tr><tr><td>patch</td><td>[!]从地址[str/hex/int]开始修补内存</td></tr><tr><td>pattern</td><td>生成字符串模板(create size生成/offset value定位)</td></tr><tr><td>ropgadget</td><td>[!]获取ROP gadgets</td></tr><tr><td>searchmem</td><td>内存中查找，支持正则</td></tr><tr><td>shellcode</td><td>生成shellcode</td></tr><tr><td>skeleton</td><td>生成python exp模板</td></tr><tr><td>readelf</td><td>获取elf文件头</td></tr><tr><td>procinfo</td><td>/proc/pid list</td></tr><tr><td>vmmap</td><td>[!]可以用来查看栈、bss段是否可以执行</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;IDA&quot;&gt;&lt;a href=&quot;#IDA&quot; class=&quot;headerlink&quot; title=&quot;IDA&quot;&gt;&lt;/a&gt;IDA&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;按键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;

      
    
    </summary>
    
    
      <category term="SecNote" scheme="https://m12r3dx.github.io/tags/SecNote/"/>
    
  </entry>
  
  <entry>
    <title>资源整理</title>
    <link href="https://m12r3dx.github.io/2018/05/27/res-list/"/>
    <id>https://m12r3dx.github.io/2018/05/27/res-list/</id>
    <published>2018-05-27T10:27:22.000Z</published>
    <updated>2019-09-08T12:35:49.575Z</updated>
    
    <content type="html"><![CDATA[<p>学会利用 RSS(inoreader)+twitter 进行情报跟进<br><br>相关情报搜集 (github+google+stackoverflow…)<br></p><p>多看经典多思考，宁缺毋滥。工程实践优先。<br></p><p>“会学习的人都是会问问题的，<br><br>学的好的人都是能讲出来的。”<br></p><p>[!] 人最困难的是认识自己，但可通过以他人的比较做个参考。<br></p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>[酷壳]<a href="https://coolshell.cn/" target="_blank" rel="noopener">https://coolshell.cn/</a></p><p>[小土刀博客]<a href="http://wdxtub.com/" target="_blank" rel="noopener">http://wdxtub.com/</a></p><p>[MorvanZhou]<a href="https://morvanzhou.github.io" target="_blank" rel="noopener">https://morvanzhou.github.io</a></p><p>[飞龙]<a href="http://flygon.net" target="_blank" rel="noopener">http://flygon.net</a></p><p>[阮一峰]<a href="https://github.com/ruanyf" target="_blank" rel="noopener">https://github.com/ruanyf</a></p><p>[算法狗]<a href="http://www.algorithmdog.com/" target="_blank" rel="noopener">http://www.algorithmdog.com/</a></p><p>[wepon]<a href="https://github.com/wepe" target="_blank" rel="noopener">https://github.com/wepe</a></p><p>[沈沉舟]<a href="http://scz.617.cn:8/" target="_blank" rel="noopener">http://scz.617.cn:8/</a> [江湖人称“四哥”，绿盟大佬]</p><h3 id="自学资源"><a href="#自学资源" class="headerlink" title="自学资源"></a>自学资源</h3><p>[开源电子书]<a href="http://it-ebooks.flygon.net" target="_blank" rel="noopener">http://it-ebooks.flygon.net</a></p><p>[研发技能表]<a href="http://blog.knownsec.com/Knownsec_RD_Checklist/index.html" target="_blank" rel="noopener">http://blog.knownsec.com/Knownsec_RD_Checklist/index.html</a><br><br>（不做安全的也可以看看，思路是通的）<br></p><p>[jobbole]<a href="https://github.com/jobbole" target="_blank" rel="noopener">https://github.com/jobbole</a> (中文 awesome 清单)</p><p>[学科自学指南]<a href="https://github.com/JustFollowUs" target="_blank" rel="noopener">https://github.com/JustFollowUs</a></p><p>[Google 开发者]<a href="https://developers.google.cn/" target="_blank" rel="noopener">https://developers.google.cn/</a> （国内镜像）</p><p>[港科大]<a href="https://github.com/hunkim" target="_blank" rel="noopener">https://github.com/hunkim</a></p><p>[apacheCN]<a href="http://www.apachecn.org/" target="_blank" rel="noopener">http://www.apachecn.org/</a></p><h3 id="Think-amp-Tips"><a href="#Think-amp-Tips" class="headerlink" title="Think &amp; Tips"></a>Think &amp; Tips</h3><p>[编程随想]<a href="https://github.com/programthink" target="_blank" rel="noopener">https://github.com/programthink</a> [从另一个侧面看中共 &amp; 他整理的书单很有意思]</p><p>[提问的智慧]<a href="https://m12r3dx.github.io/blog/Ask.html">https://m12r3dx.github.io/blog/Ask.html</a></p><p>[原则]<a href="https://www.jianshu.com/p/200ad781769a" target="_blank" rel="noopener">https://www.jianshu.com/p/200ad781769a</a> [建议阅读原书 &amp; 工作原则相关]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学会利用 RSS(inoreader)+twitter 进行情报跟进&lt;br&gt;&lt;br&gt;相关情报搜集 (github+google+stackoverflow…)&lt;br&gt;&lt;/p&gt;
&lt;p&gt;多看经典多思考，宁缺毋滥。工程实践优先。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;“会学习的人都是会问问题的，
      
    
    </summary>
    
    
      <category term="Compass" scheme="https://m12r3dx.github.io/tags/Compass/"/>
    
  </entry>
  
  <entry>
    <title>提问的智慧</title>
    <link href="https://m12r3dx.github.io/2018/01/12/ask/"/>
    <id>https://m12r3dx.github.io/2018/01/12/ask/</id>
    <published>2018-01-12T07:00:00.000Z</published>
    <updated>2019-05-17T09:24:42.660Z</updated>
    
    <content type="html"><![CDATA[<h4 id="艾瑞克-史蒂文-雷蒙德（Eric-Steven-Raymond）"><a href="#艾瑞克-史蒂文-雷蒙德（Eric-Steven-Raymond）" class="headerlink" title="艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）"></a>艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</h4><p>Thyrsus Enterprises</p><p><a href="mailto:&#x65;&#x73;&#x72;&#x40;&#116;&#104;&#x79;&#114;&#115;&#x75;&#115;&#x2e;&#x63;&#111;&#109;" target="_blank" rel="noopener">&#x65;&#x73;&#x72;&#x40;&#116;&#104;&#x79;&#114;&#115;&#x75;&#115;&#x2e;&#x63;&#111;&#109;</a></p><h4 id="瑞克-莫恩（Rick-Moen）"><a href="#瑞克-莫恩（Rick-Moen）" class="headerlink" title="瑞克.莫恩（Rick Moen）"></a>瑞克.莫恩（Rick Moen）</h4><p><a href="mailto:&#x72;&#101;&#x73;&#112;&#111;&#110;&#x64;&#x2d;&#97;&#x75;&#x74;&#x6f;&#64;&#x6c;&#x69;&#x6e;&#x75;&#x78;&#x6d;&#x61;&#102;&#105;&#x61;&#46;&#x63;&#x6f;&#109;" target="_blank" rel="noopener">&#x72;&#101;&#x73;&#112;&#111;&#110;&#x64;&#x2d;&#97;&#x75;&#x74;&#x6f;&#64;&#x6c;&#x69;&#x6e;&#x75;&#x78;&#x6d;&#x61;&#102;&#105;&#x61;&#46;&#x63;&#x6f;&#109;</a><br>版权©2001, 2006 Eric S. Raymond, Rick Moen</p><h3 id="修订历史"><a href="#修订历史" class="headerlink" title="修订历史"></a>修订历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">修订版 3.92013年4月23日esr</span><br><span class="line">修正链接</span><br><span class="line">修订版 3.82012年6月19日esr</span><br><span class="line">修正链接</span><br><span class="line">修订版 3.72010年12月6日esr</span><br><span class="line">对于英语为第二语言人士的有益建议</span><br><span class="line">修订版 3.72010年11月2日esr</span><br><span class="line">几种翻译不见了</span><br><span class="line">修订版 3.62008年3月19日esr</span><br><span class="line">小更新及新链接</span><br><span class="line">修订版 3.52008年1月2日esr</span><br><span class="line">勘误及一些翻译链接</span><br><span class="line">修订版 3.42007年3月24日esr</span><br><span class="line">新章节：“关于代码的问题”</span><br><span class="line">修订版 3.32006年9月29日esr</span><br><span class="line">增加凯.尼格曼（Kai Niggemann）的一个好建议</span><br><span class="line">修订版 3.22006年1月10日esr</span><br><span class="line">加入瑞克.莫恩（Rick Moen）编写的内容</span><br><span class="line">修订版 3.12004年10月28日esr</span><br><span class="line">文档“谷歌是你的朋友！”</span><br><span class="line">修订版 3.02004年2月2日esr</span><br><span class="line">主要新增在网页论坛应有的礼节</span><br></pre></td></tr></table></figure><h3 id="原文：How-To-Ask-Questions-The-Smart-Way"><a href="#原文：How-To-Ask-Questions-The-Smart-Way" class="headerlink" title="原文：How To Ask Questions The Smart Way"></a><a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">原文：How To Ask Questions The Smart Way</a></h3><p>翻译：王刚 <yafrank 126 at dot com><br>时间：2013年10月26日<br>内容</yafrank></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#弃权申明">弃权申明</a></li><li><a href="#引言">引言</a></li><li><a href="#提问前">提问前</a></li><li><a href="#提问时">提问时</a><ul><li><a href="#仔细挑选论坛">仔细挑选论坛</a></li><li><a href="#面向新手的论坛和互联网中继聊天irc通常响应最快">面向新手的论坛和互联网中继聊天（IRC）通常响应最快</a></li><li><a href="#第二步使用项目的邮件列表">第二步，使用项目的邮件列表</a></li><li><a href="#使用有意义且明确的主题">使用有意义且明确的主题</a></li><li><a href="#使问题容易回复">使问题容易回复</a></li><li><a href="#用清晰语法拼写正确的语句书写">用清晰、语法、拼写正确的语句书写</a></li><li><a href="#使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#描述问题应准确且有内容">描述问题应准确且有内容</a></li><li><a href="#量不在多精炼则灵">量不在多，精炼则灵</a></li><li><a href="#别急于宣称找到臭虫">别急于宣称找到臭虫</a></li><li><a href="#低声下气代替不了做自己的家庭作业">低声下气代替不了做自己的家庭作业</a></li><li><a href="#描述问题症状而不是猜测">描述问题症状而不是猜测</a></li><li><a href="#按时间先后罗列问题症状">按时间先后罗列问题症状</a></li><li><a href="#描述目标而不是过程">描述目标而不是过程</a></li><li><a href="#别要求私下回复电邮">别要求私下回复电邮</a></li><li><a href="#提问应明确">提问应明确</a></li><li><a href="#关于代码的问题">关于代码的问题</a></li><li><a href="#别张贴家庭作业式问题">别张贴家庭作业式问题</a></li><li><a href="#删除无意义的要求">删除无意义的要求</a></li><li><a href="#不要把问题标记为紧急即使对你而言的确如此">不要把问题标记为“紧急”，即使对你而言的确如此</a></li><li><a href="#礼貌总是有益的">礼貌总是有益的</a></li><li><a href="#礼貌总是有益的">问题解决后追加一条简要说明</a></li></ul></li><li><a href="#如何解读回答">如何解读回答</a><ul><li><a href="#读读该死的手册rtfm和搜搜该死的网络stfw如何明白你已完全搞砸">“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸</a></li><li><a href="#如果还不明白">如果还不明白……</a></li><li><a href="#对待无礼">对待无礼</a></li></ul></li><li><a href="#别象失败者那样反应">别象失败者那样反应</a></li><li><a href="#别象失败者那样反应">提问禁忌</a></li><li><a href="#好问题与坏问题">好问题与坏问题</a></li><li><a href="#如果得不到回答">如果得不到回答</a></li><li><a href="#如何更好地回答">如何更好地回答</a></li><li><a href="#相关资源">相关资源</a></li><li><a href="#鸣谢">鸣谢</a></li></ul><blockquote><p>译文： 印尼语 白俄罗斯语 巴西葡萄牙语 简体中文 荷兰语 法语 乔治亚语 德语 希腊语 希伯来语 日语 波兰语 葡萄牙语 罗马尼亚语 俄语 西班牙语 泰语 如果你想复制、镜像、翻译或引用本文，请参阅我的 复制协议。</p></blockquote><h3 id="弃权申明"><a href="#弃权申明" class="headerlink" title="弃权申明"></a>弃权申明</h3><p>许多项目的网站在如何取得帮助的部分链接了本文，这没有关系，也正是我们想要的。但如果你是该项目生成此链接的网管，请在链接附近显著位置注明：我们不提供该项目的服务支持！</p><p>我们已经领教了没有此说明带来的痛苦，我们将不停地被一些白痴纠缠，他们认为既然我们发布了本文，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要帮助正在阅读本文，然后就带着可以直接从作者那取得帮助的印象离开，那么 你 就不幸成了我们所说的白痴之一。 别向 我们 提问，我们不会理睬的。 我们只是在这教你如何从那些真正懂得你软硬件问题的人那里取得帮助，但 99.9％ 的时间我们不会是那些人。除非你非常地 确定 本文的作者是你遇到问题方面的专家，请不要打搅，这样大家都更开心一点。</p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在 黑客 的世界里，你所提技术问题的解答很大程度上取决于你提问的方式与解决此问题的难度，本文将教你如何提问才更有可能得到满意的答复。</p><p>开源程序的应用已经很广，你通常可以从其他更有经验的用户而不是黑客那里得到解答。这是好事，他们一般对新手常有的毛病更容忍一点。然尔，使用我们推荐的方法，象对待黑客那样对待这些有经验的用户，通常能最有效地得到问题的解答。</p><p>第一件需要明白的事是黑客喜欢难题和激发思考的好问题。假如不是这样，我们也不会写本文了。如果你能提出一个有趣的问题让我们咀嚼玩味，我们会感激你。好问题是种激励与礼物，帮助我们发展认知，揭示没有注意或想到的问题。在黑客中，“好问题！” 是非常热烈而真挚的赞许。</p><p>此外，黑客还有遇到简单问题就表现出敌视或傲慢的名声。有时，我们看起来还对新手和愚蠢的家伙有条件反射式的无礼，但事情并不真是这样。</p><p>我们只是毫无歉意地敌视那些提问前不愿思考、不做自己家庭作业的人。这种人就象时间无底洞──他们只知道索取，不愿意付出，他们浪费了时间，这些时间本可用于其它更有趣的问题或更值得回答的人。我们将这种人叫做 “失败者（loser）” （由于历史原因，我们有时将“loser”拼写为“lusers” 。）</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，计算机只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做，我们承认这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。不过，我们回答问题的风格是为了适应那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就会在自己能做得最好的事情上不再那么犀利。</p><p>我们（大多数）是自愿者， 从自己繁忙的生活中抽时间来回答问题，有时会力不从心。因此，我们会毫不留情地滤除问题，特别是那些看起来象是失败者提的，以便更有效地把回答问题的时间留给那些胜利者。</p><p>如果你认为这种态度令人反感、以施惠者自居或傲慢自大，请检查你的假设，我们并未要求你屈服──事实上，假如你做了该做的努力，我们中的大多数将非常乐意平等地与你交流，并欢迎你接纳我们的文化。试图去帮助那些不愿自救的人对我们简直没有效率。不懂没有关系，但愚蠢地做事不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你 必须 表现出能引导你在行的姿态──机 敏、有想法、善于观察、乐于主动参与问题的解决。如果你做不到这些使你与众不同的事情，我们建议你付钱跟别人签商业服务合同，而不是要求黑客无偿帮助。</p><p>如果你决定向我们求助，你不会想成为一名失败者，你也不想被看成一个失败者。得到快速有效回答的最好方法是使提问者看起来象个聪明、自信和有想法的人，并且暗示只是碰巧在某一特别问题上需要帮助。</p><p>（欢迎对本文指正，可以将建议发至 <a href="mailto:esr@thyrsus.com" target="_blank" rel="noopener">esr@thyrsus.com</a> 或 <a href="mailto:respond-auto@linuxmafia.com" target="_blank" rel="noopener">respond-auto@linuxmafia.com</a>。 请注意，本文不想成为一般性的 网络礼仪 指南，我一般会拒绝那些与引出技术论坛中有用的回答不特别相关的建议。）</p><h3 id="提问前"><a href="#提问前" class="headerlink" title="提问前"></a>提问前</h3><p>在通过电邮、新闻组或论坛提技术问题以前，做以下事情：</p><ul><li>尝试在你准备提问论坛的历史文档中搜索答案</li><li>尝试搜索互联网以找到答案</li><li>尝试阅读手册以找到答案</li><li>尝试阅读“常见问题文档”（FAQ）以找到答案</li><li>尝试自己检查或试验以找到答案</li><li>尝试请教懂行的朋友以找到答案</li><li>如果你是程序员，尝试阅读源代码以找到答案</li></ul><p>提问时，请先表明你已做了上述事情，这将有助于建立你不是寄生虫与浪费别人时间的印象。最好再表述你从中 学到的东西 ，我们喜欢回答那些表现出能从答案中学习的人。</p><p>运用某些策略，比如用谷歌（Google）搜索你遇到的各种错误提示（既搜索 谷歌论坛，也搜索网页）， 这样很可能直接就找到了解决问题的文档或邮件列表线索。 即使没有结果，在邮件列表或新闻组寻求帮助时提一句“我在谷歌中搜过下列句子但没有找到什么有用的东西” 也是件好事，至少它表明了搜索引擎不能提供哪些帮助。将搜索关键词与你的问题及可能的解决方案联系起来，还有助于引导其他有类似问题的人。</p><p>别着急，不要指望几秒钟的谷歌搜索就能解决一个复杂的问题。读一下常见问题文档。在向专家提问之前，先向后靠靠放松一下，再思考一下问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑抛出，只因你的第一次搜索没有结果（或者结果太多）。</p><p>认真地思考，准备好你的问题。轻率的提问只能得到轻率的回答，或者压根没有。在提问时，你越是表现出在此前做过思考与努力去解决自己的问题，你越有可能得到真正的帮助。</p><p>注意别提错问题。如果提问基于错误的假设，某黑客多半会一边想 “愚蠢的问题……”，一边按将错就错的答案回复你，并且希望这种只是得到你自己“问的问题”而非真正所需的解答，给你一个教训。</p><p>永远不要假设你 有资格 得到解答。你没有这种资格，毕竟你没有为此服务付费。如果你能够提出有内容、有趣和激励思考的问题──那种毫无疑问能够向社区贡献经验，而不仅仅是消极地要求从别人那获取知识的问题，你将“挣到”答案。</p><p>另一方面，表明你有能力也乐意参与问题的解决是个很好的开端。“有没有人能指个方向？”，我这还差点什么？”，“我应该查哪个网站？”，通常要比 “请给出我可以用的完整步骤”更容易得到回复，因为你表明了只要有人能指个方向，你就很乐意完成剩下的过程。</p><h3 id="提问时"><a href="#提问时" class="headerlink" title="提问时"></a>提问时</h3><h4 id="仔细挑选论坛"><a href="#仔细挑选论坛" class="headerlink" title="仔细挑选论坛"></a>仔细挑选论坛</h4><p>要对在哪提问留心，如果你做了下述事情，多半会被一笔勾销或被看成“失败者”：</p><ul><li>张贴与论坛主题无关的问题</li><li>在面向高级技术问题的论坛上张贴肤浅的问题，或者反之。</li><li>在太多不同的新闻组同时张贴</li><li>给既非熟人也没有义务解决你问题的人发送你私人的电邮</li></ul><p>为保护通信的渠道不被无关的东西淹没，黑客会除掉那些没有找对地方的问题，你不会想让这种事落到自己头上的。</p><p>因此，第一步是找对论坛。谷歌和其它搜索引擎还是你的朋友，可以用它们搜索你遇到困难的软硬件问题最相关的项目网站。那里通常都有项目的常见问题（FAQ）、邮件列表及文档的链接。如果你的努力（包括 阅读 FAQ）都没有结果，这些邮件列表就是最后能取得帮助的地方。项目的网站也许还有报告臭虫的流程或链接，如果是这样，去看看。</p><p>向陌生的人或论坛发送邮件极有可能是在冒险。譬如，不要假设一个内容丰富的网页的作者想充当你的免费顾问，不要对你的问题是否会受到欢迎做太乐观的估计──如果你不确定，向别处发或者压根别发。</p><p>在选择论坛、新闻组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以明确你的问题是否切题。发贴前先翻翻已有的帖子，这样可以让你感受一下那里行事的方式。事实上，张贴前在新闻组或邮件列表的历史文档中搜索与你问题相关的关键词是个极好的主意，也许就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别象机关枪似的一次性“扫射”所有的帮助渠道，这就象大喊大叫一样会令人不快，温柔地一个一个来。</p><p>弄懂主题！最典型的错误之一是在某种致立于跨平台可移植的语言、库或工具的论坛中提关于 Unix 或 Windows 操作系统程序接口的问题。如果你不明白为什么这是大错，最好在搞清楚概念前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问比在私有论坛中提同样的问题更容易得到有用的回答。有几个道理支持这点，一是看潜在的回复者有多少，二是看论坛的参与者有多少，黑客更愿回答能启发多数人的问题。</p><p>可以理解，老练的黑客和一些流行软件的作者正在承受过多的不当消息。就象那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端──已经好几次了，一些流行软件的作者退出了对自己软件的支持，因为伴随而来的涌入其私人邮箱的垃圾邮件变得无法忍受。</p><h4 id="面向新手的论坛和互联网中继聊天（IRC）通常响应最快"><a href="#面向新手的论坛和互联网中继聊天（IRC）通常响应最快" class="headerlink" title="面向新手的论坛和互联网中继聊天（IRC）通常响应最快"></a>面向新手的论坛和互联网中继聊天（IRC）通常响应最快</h4><p>本地的用户组织或者你所用的 Linux 发行版也许正在宣传新手取得帮助的论坛或 IRC 通道（在一些非英语国家，新手论坛很可能还是邮件列表），这些地方是开始提问的好去处，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 通道是公开邀请提问的地方，通常可以得到实时的回复。</p><p>事实上，如果出问题的程序来自某发行版（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的项目论坛或邮件列表，（否则）该项目的黑客可能仅仅回复“用 我们的 代码”。</p><p>在任何论坛发贴以前，先看看有没有搜索功能。如果有，就试着用问题的几个关键词搜索一下，也许就有帮助。如果在此之前你已做过全面的网页搜索（你应该这样去做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 通道提供项目的用户支持有增长的趋势，电子邮件交流则更多地为项目开发者保留。所以先在论坛或 IRC 中寻求与该项目相关的帮助。</p><h4 id="第二步，使用项目的邮件列表"><a href="#第二步，使用项目的邮件列表" class="headerlink" title="第二步，使用项目的邮件列表"></a>第二步，使用项目的邮件列表</h4><p>当某个项目存在开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文档和主页，找到项目的邮件列表并使用它。采用这种办法有几个很好的理由：</p><ul><li>向个别开发者提的问题（如果）足够好，也将对整个项目组有益。相反，如果你认为自己的问题对整个项目组来说太愚蠢，这也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都要存档，那些存档将被搜索引擎索引，如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息改进文档或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有 “用户” 也有“开发者”（或 “黑客”）邮件列表或论坛，而你又不摆弄那些代码，向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会遭受你的噪音干扰。</p><p>然尔，如果你 确信 你的问题不一般，而且在“用户” 列表或论坛中几天都没有回复，可以试试“开发者”列表或论坛。建议你在张贴前最好先暗暗地观察几天,至少看看最近几天保存的帖子,以了解那的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的地址，只管向其发信。即便在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h4 id="使用有意义且明确的主题"><a href="#使用有意义且明确的主题" class="headerlink" title="使用有意义且明确的主题"></a>使用有意义且明确的主题</h4><p>在邮件列表、新闻组或论坛中，主题是你在五十个或更少的字以内吸引有资格专家注意的黄金机会，不要用诸如 “请帮我” （更别提大写的 “请帮我！！！！”，这种主题的消息会被条件反射式地删掉）之类的唠叨浪费机会。不要用你痛苦的深度来打动我们，相反，要在这点空间中使用超级简明扼要的问题描述。</p><p>使用主题的好惯例是“对象──偏差”（式的描述），许多技术支持组织就是这样做的。在“对象”部分指明是哪一个或哪一组东西有问题，在“偏差”部分则描述与期望的行为不一致的地方。</p><p>愚蠢：</p><blockquote><p>救命啊！我的笔记本视频工作不正常！</p></blockquote><p>明智：</p><blockquote><p>X.org 6.8.1 扭曲鼠标光标，MV1005 型号的某显卡芯片组</p></blockquote><p>更明智：</p><blockquote><p>使用 MV1005 型号的某显卡芯片组在 X.org 6.8.1 的鼠标光标被扭曲</p></blockquote><p>编写 “对象──偏差”式描述的过程有助于你组织对问题的细致思考。是什么被影响了？仅仅是鼠标光标或者还有其它图形？只在 X.org 中出现？或只是在其 6.8.1 版中？是针对某显卡芯片组？或者只是其中的 MV1005 型号？一个黑客只需描一眼就能够立即明白什么是你遇到的问题，什么是你自己的问题。</p><p>更一般地，想象一下在一个只显示主题的文档索引中查找。让你的主题更好地反映问题，可以使下一个搜索类似问题的人能够在文档中直接就找到答案的线索，而不用再次发贴提问。</p><p>如果你想在回复中提问，确保改变主题以表明你是在问一个问题，一个主题象 <code>Re: 测试</code> 或者 <code>Re: 新臭虫</code> 的消息不太可能引起足够的注意。同时，将回复中与新主题不甚相关的引用内容尽量删除。</p><p>对于列表消息，不要直接点击回复（按钮）来开始一个全新的线索，这将限制你的观众。有些邮件阅读程序，比如 mutt，允许用户按线索排序并通过折叠线索来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变主题还不够。mutt 和其它一些邮件阅读程序还要检查邮件头主题以外的其它信息，以便为其指定线索，所以宁可发一个全新的邮件。</p><p>在论坛，因为消息与特定的线索紧密结合，并且通常在线索之外不可见，好的提问方式略有不同，通过回复提问并不要紧。不是所有论坛都允许在回复中出现分离的主题，而且这样做了基本上没有人会去看。不过，通过回复提问本身就是令人怀疑的做法，因为它们只会被正在查看该线索的人读到。所以，除非你 只想 在该线索当前活跃的人群中提问，还是另起炉灶比较好。</p><h4 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h4><p>以<code>请向……回复</code>来结束问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟考虑你的问题更麻烦。如果你的邮件客户端程序不支持这样做，换个好点的；如果是操作系统不支持所有这种邮件客户端程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是完全无礼的，除非你确信回复的信息也许是敏感的（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复线索时得到电子邮件提醒，可以要求论坛发送。几乎所有论坛都支持诸如<code>留意本线索</code>、<code>有回复发送邮件</code>等功能。</p><h4 id="用清晰、语法、拼写正确的语句书写"><a href="#用清晰、语法、拼写正确的语句书写" class="headerlink" title="用清晰、语法、拼写正确的语句书写"></a>用清晰、语法、拼写正确的语句书写</h4><p>经验告诉我们，粗心与草率的作者通常也粗心与草率地思考和编程（我敢打赌）。为这些粗心与草率的思考者回答问题没有什么好处，我们宁可将时间花在其它地方。</p><p>清楚、良好地表达你的问题非常重要。如果你觉得这样做麻烦，我们也觉得注意（你的问题）麻烦。花点额外的精力斟酌一下字句，用不着太僵硬与正式──事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它 必须 很准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将 <code>its</code> 混淆为 <code>it&#39;s</code>，<code>loose</code> 搞成 <code>lose</code> 或者将 “discrete” 弄成 “discreet”。不要全部用大写，这会被视为无礼的大声嚷嚷 （全部小写也好不到哪去，因为不易阅读。Alan Cox [注：著名黑客，Linux 内核的重要参与者] 也许可以这样做，但你不行。）</p><p>一般而言，如果你写得象个半文盲似的傻子，多半得不到理睬。也不要使用即时通讯中的简写，如将 <code>you</code> 简化为 <code>u</code> 会使你看起来象一个为了节约二次击键的半文盲式的傻子。更糟的是，如果象个小孩似地鬼画桃符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在非母语论坛提问，你的拼写与语法错误会得到有限的宽容，但懒惰完全不会被容忍（是的，我们通常看得出其中的差别）。同时，除非你知道回复者使用的语言，请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在互联网上英语是工作语言，用英语书写可以将你的问题不被阅读就被直接删除的可能性降到最低。</p><p>如果你用英语书写但它是你的第二语言，最好提醒潜在的回复者语言上可能的困难以便绕过这个问题，比如：</p><ul><li>英语不是我的母语，请谅解拼写错误。</li><li>如果您使用某某语言，请电邮/私聊我，也许我需要您的协助翻译我的问题。</li><li>对于这个技术术语本身我很熟悉，但对于它的一些俚语或习惯表达方式就不太明白了。</li><li>我已经同时用某某语及英语提问，如果您使用两者之一回复，我很乐意翻译。</li></ul><h4 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h4><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li><p>使用纯文本而不是 HTML（超文本标注语言）（ 关闭HTML 并不难）</p></li><li><p>使用 MIME（多用途互联网邮件扩展）附件通常没有问题，前提是真正有内容（譬如附带的源文件或补丁），而不仅仅是邮件客户端程序生成的模板（譬如只是消息内容的拷贝）。</p></li><li>不要发送整段只是单行句子但多次折回的邮件（这使得回复部分内容非常困难）。设想你的读者是在80个字符宽的文本终端阅读邮件，设置你的行折回点小于 80 列。</li><li>但是，也 不要 用任何固定列折回数据（譬如日志文件拷贝或会话记录）。数据应该原样包含，使回复者确信他们看到的是与你看到的一样的东西。</li><li>在英语论坛中，不要使用’Quoted-Printable’ MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持。当它们分断时，那些文本中四处散布的 “=20”符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>永远不要 指望黑客们阅读使用封闭的专用格式编写的文档，诸如微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就象有人将还在冒热气的猪粪倒在你门口时你的反应一样。即使他们能够处理，也很厌恶这么做。</li><li>如果你从使用视窗的电脑发送电子邮件，关闭问题颇多的微软“聪明引用”功能（在“工具” -&gt; “自动纠正选项”的“输入时自动格式化”下去掉聪明引用的选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用“表情符号”和“HTML”功能(当它们提供时)。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来象个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是有用的回复更有兴趣。</li><li>如果你使用图形用户界面的邮件客户端程序(如网景公司的 Messenger、微软公司的 Outlook 或者其它类似的)，注意它们的缺省配置不一定满足这些要求。大多数这类程序有基于菜单的<code>查看源码</code>命令，用它来检查发送文件夹中的消息，以确保发送的是没有多余杂质的纯文本文件。</li></ul><h4 id="描述问题应准确且有内容"><a href="#描述问题应准确且有内容" class="headerlink" title="描述问题应准确且有内容"></a>描述问题应准确且有内容</h4><ul><li>仔细、清楚地描述问题的症状</li><li>描述问题发生的环境(主机、操作系统、应用程序，任何相关的)，提供销售商的发行版和版本号（如：“Fedora Core 7”、“Slackware 9.1”等）</li><li>描述提问前做过的研究及其理解。</li><li>描述提问前为确定问题而采取的诊断步骤。</li><li>描述最近对计算机或软件配置的任何相关改变。</li><li>如果可能，提供在可控环境下重现问题的方法。</li><li>尽最大努力预测黑客会提到的问题，并提前备好答案。</li></ul><p>如果你认为是代码有问题，向黑客提供在可控环境下重现问题的方法尤其重要。当你这么做时，得到有用且及时回复的可能性将大大增加。</p><p><a href="http://www.chiark.greenend.org.uk/%7Esgtatham/" target="_blank" rel="noopener">西蒙.泰瑟姆（Simon Tatham）</a>写过一篇《<a href="http://www.chiark.greenend.org.uk/%7Esgtatham/bugs-tw.html" target="_blank" rel="noopener">如何有效报告臭虫》</a>的文章，我强烈推荐各位阅读。</p><h4 id="量不在多，精炼则灵"><a href="#量不在多，精炼则灵" class="headerlink" title="量不在多，精炼则灵"></a>量不在多，精炼则灵</h4><p>你应该（写得）精炼且有内容，简单地将一大堆代码或数据罗列在求助消息中达不到目的。如果你有一个很大且复杂的测试样例让程序崩溃，尝试将其裁剪得越小越好。</p><p>至少有三个理由支持这点。第一，让别人看到你在努力简化问题使你更有可能得到回复。第二，简化问题使你更有可能得到 <code>有用的</code> 回复。第三，在提纯臭虫报告的过程中，你可能自己就找到了解决办法或权宜之计。</p><h4 id="别急于宣称找到臭虫"><a href="#别急于宣称找到臭虫" class="headerlink" title="别急于宣称找到臭虫"></a>别急于宣称找到臭虫</h4><p>当你在一个软件中遇到问题，除非你 非常、非常 的有根据，不要动辄声称找到了臭虫。提示：除非你能提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全确信。对于网页和文档也如此，如果你（声称）发现了文档的“臭虫”，你应该能提供相应位置的替代文本。</p><p>记住，还有许多其它用户并未经历你遇到的问题，否则你在阅读文档或搜索网页时就应该发现了（<a href="#你在报怨前已经做了这些，是吧 ？">你在报怨前已经做了这些，是吧 ？</a>）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了臭虫，也就置疑了他们的能力，即使你是对的，也有可能会使其中的部分人感到不快。（此外，）在主题中嚷嚷“臭虫”也是特别不老练的。</p><p>提问时，即使你私下非常确信已经发现一个真正的臭虫，最好写得象是 你 做错了什么。如果真的有臭虫，你会在回复中看到这点。这样做的话，如果真有虫子，维护者就会向你道歉，这总比你弄砸了然后欠别人一个道歉要强。</p><h4 id="低声下气代替不了做自己的家庭作业"><a href="#低声下气代替不了做自己的家庭作业" class="headerlink" title="低声下气代替不了做自己的家庭作业"></a>低声下气代替不了做自己的家庭作业</h4><p>有些人明白他们不应该粗鲁或傲慢地行事并要求得到答复，但他们退到相反的低声下气的极端：“我知道我只是个可怜的新丁，一个失败者，但……”。这既使人困扰，也没有用，当伴随着对实际问题含糊的描述时还特别令人反感。</p><p>别用低级灵长类动物的办法浪费你我的时间，相反，尽可能清楚地描述背景情况和你的问题，这比低声下气更好地摆正了你的位置。</p><p>有时，论坛设有单独的初学者提问版面，如果你真的认为遇到了肤浅的问题，到那去就是了，但一样别低声下气。</p><h4 id="描述问题症状而不是猜测"><a href="#描述问题症状而不是猜测" class="headerlink" title="描述问题症状而不是猜测"></a>描述问题症状而不是猜测</h4><p>告诉黑客是什么导致了问题是没用的（如果你的诊断理论是了不起的东西，你还会向别人咨询求助吗？）。所以，确保只是告诉他们问题的原始症状，而不是你的解释和理论，让他们来解释和诊断。如果你认为陈述自己的猜测很重要，应清楚地说明这只是你的猜测并描述为什么它们不起作用。</p><p>愚蠢：</p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？</p></blockquote><p>明智：</p><blockquote><p>我组装的电脑（K6/233 CPU、FIC-PA2007 主板[威盛 Apollo VP2 芯片组]、Corsair PC133 SDRAM 256Mb 内存）最近在开机 20 分钟左右、做内核编译时频繁地报 SIG11 错，但在头 20 分钟内从不出问题。重启动不会复位时钟，但整夜关机会。更换所有内存未解决问题，相关的典型编译会话日志附后。</p></blockquote><p>由于以上这点许多人似乎难以掌握，这里有句话可以提醒你：“所有的诊断专家都来自密苏里州”。美国国务院的官方座右铭则是“让我看看”（出自国会议员威勒德.D.范迪弗［Willard D. Vandiver］在1899年时的讲话：“我来自一个出产玉米、棉花、牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。”）针对诊断者而言，这并不是怀疑，而只是一种真实而有用的需求，以便让他们看到与你看到的原始证据尽可能一致的东西，而不是你的猜测与总结。（所以，）让我们看看。</p><h4 id="按时间先后罗列问题症状"><a href="#按时间先后罗列问题症状" class="headerlink" title="按时间先后罗列问题症状"></a>按时间先后罗列问题症状</h4><p>刚出问题之前发生的事情通常包含有解决问题最有效的线索。所以，记录中应准确地描述你、电脑和软件在崩溃前都做了什么。在命令行处理的情况下，有会话日志（如运行脚本工具生成的）并引用相关的若干（如20）行记录会非常有帮助。</p><p>如果崩溃的程序有诊断选项（如-v详述开关），试着选择这些能在记录中增加排错信息的选项。记住，“多”不等于“好”。试着选取适当的排错级别以便提供有用的信息而不是将阅读者淹没在垃圾中。</p><p>如果你的记录很长（如超过四段），在开头简述问题随后按时间先后罗列详细过程也许更有用。这样，黑客在读你的记录时就知道该注意哪些内容了。</p><h4 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h4><p>如果你想弄清楚如何做某事（而不是报告一个臭虫），在开头就描述你的目标，然后才陈述遇到问题的特定步骤。</p><p>经常出现这种情况，寻求技术帮助的人在脑袋里有个更高层次的目标，他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身有问题，结果要费很大的劲才能通过。</p><p>愚蠢：</p><blockquote><p>我怎样才能让某图形程序的颜色拾取器取得十六进制的 RGB 值？</p></blockquote><p>明智：</p><blockquote><p>我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的 RGB 值。</p></blockquote><p>第二种提法是明智的，它使得建议采用更合适的工具以完成任务的回复成为可能。</p><h4 id="别要求私下回复电邮"><a href="#别要求私下回复电邮" class="headerlink" title="别要求私下回复电邮"></a>别要求私下回复电邮</h4><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有才能的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为回复者也因为能力和学识被其它同行看到而得到某种回报。</p><p>当你要求私下回复时，此过程和回报都被中止。别这样做，让 回复者 来决定是否私下回答──如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人毫无意义。</p><p>对这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么“向我发电邮，我将为论坛归纳这些回复”将是神奇的句子。试着将邮件列表或新闻组从洪水般雷同的回复中解救出来是非常有礼貌的──但你必须信守诺言。</p><h4 id="提问应明确"><a href="#提问应明确" class="headerlink" title="提问应明确"></a>提问应明确</h4><p>漫无边际的问题通常也被视为没有明确限制的时间无底洞。最有可能给你有用答案的人通常也是最忙的人（假如只是因为他们承担了太多工作的话），这些人对于没有止境的时间无底洞极其敏感，所以他们也倾向于讨厌那些漫无边际的问题。</p><p>如果你明确了想让回复者做的事（如指点方向、发送代码、检查补丁或其它），你更有可能得到有用的回复。（因为）这样可以让他们集中精力并间接地设定了他们为帮助你需要花费的时间和精力上限，这很好。</p><p>要想理解专家生活的世界，可以这样设想：那里有丰富的专长资源但稀缺的响应时间。你暗中要求他们奉献的时间越少，你越有可能从这些真正懂行也真正很忙的专家那里得到解答。</p><p>所以限定你的问题以使专家回答时需要付出的时间最少──这通常与简化问题还不太一样。举个例，“请问可否指点一下哪有好一点的 X 解释？”通常要比“请解释一下 X”明智。如果你的代码不运行了，通常请别人看看哪有问题比叫他们帮你改正更明智。</p><h4 id="关于代码的问题"><a href="#关于代码的问题" class="headerlink" title="关于代码的问题"></a>关于代码的问题</h4><p>别要求他人给你出问题的代码排错而不提及应该从何入手。张贴几百行的代码，然后说一声“它不能运行”会让你得不到理睬。只贴几十行代码，然后说一句“在第七行以后，本应该显示<x>，但实际出现的是<y>”非常有可能让你得到回复。</y></x></p><p>最精确描述代码问题的方法是提供一个能展示问题的最小测试样例。什么是最小测试样例？它是对问题的展现，只需要刚好能够重现非预期行为的代码即可。如何生成一个最小测试样例？如果你知道哪一行或哪一段代码会产生问题，将其复制并提供刚好够用的外围支撑代码以构成一个完整的样例（够用是指源码刚好能被编译器、解释器或任何处理它的程序所接受）。如果你不能将问题缩小到特定的段落，复制源码并去除那些与问题无关的代码段。你能提供的最小测试样例越小越好（参见 量不在多，精炼则灵 ）。</p><p>生成一个非常小的最小测试样例并不总是可能，但尽力去做是很好的锻练，这有可能帮助你找到需要自己解决的问题。即使你找不到，黑客们喜欢看到你努力过，这将使他们更合作。</p><p>如果你只是想让别人帮忙审一下代码，在最开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h4 id="别张贴家庭作业式问题"><a href="#别张贴家庭作业式问题" class="headerlink" title="别张贴家庭作业式问题"></a>别张贴家庭作业式问题</h4><p>黑客们善于发现“家庭作业”式的问题。我们中的大多数人已经做了自己的家庭作业，那是该 你 做的，以便从中学到东西。问一下提示没有关系，但不是要求完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户组、论坛或（作为最后一招）在项目的“用户”邮件列表或论坛中提问。尽管黑客们 会 看出来，一些老用户也许仍会给你提示。</p><h4 id="删除无意义的要求"><a href="#删除无意义的要求" class="headerlink" title="删除无意义的要求"></a>删除无意义的要求</h4><p>抵制这种诱惑，即在求助消息末尾加上诸如“有人能帮我吗？”或“有没有答案？”之类在语义上毫无意义的东西。第一，如果问题描述还不完整，这些附加的东西最多也只能是多余的。第二，因为它们是多余的，黑客们会认为这些东西烦人──就很有可能用逻辑上无误但打发人的回复，诸如“是的，你可以得到帮助”和“不，没有给你的帮助”。</p><p>一般来说，避免提“是或否”类型的问题，除非你想得到 “是或否”类型的回答。</p><h4 id="不要把问题标记为“紧急”，即使对你而言的确如此"><a href="#不要把问题标记为“紧急”，即使对你而言的确如此" class="headerlink" title="不要把问题标记为“紧急”，即使对你而言的确如此"></a>不要把问题标记为“紧急”，即使对你而言的确如此</h4><p>这是你的问题，不要我们的。宣称“紧急”极有可能事与愿违：大多数黑客会直接删除这种消息，他们认为这是无礼和自私地企图得到即时与特殊的关照。而且“紧急”或其它有类似含义的主题有可能触发垃圾过滤规则，潜在的回复者可能永远看不到你的问题！</p><p>有一点点局部的例外，如果你是在一些知名度很高、会使黑客们激动的地方使用程序，也许值得这样去做。在这种情况下，如果你有期限压力，也很有礼貌地提到这点，人们也许会有足够的兴趣快一点回答。</p><p>当然，这是非常冒险的，因为黑客们对什么是令人激动的标准多半与你的不同。譬如从国际空间站这样张贴没有问题，但代表感觉良好的慈善或政治原因这样做几乎肯定不行。事实上，张贴诸如“紧急：帮我救救这个毛绒绒的小海豹！”肯定会被黑客回避或光火，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这不可思议，再把剩下的内容多读几遍，直到弄懂了再发贴也不迟。</p><h4 id="礼貌总是有益的"><a href="#礼貌总是有益的" class="headerlink" title="礼貌总是有益的"></a>礼貌总是有益的</h4><p>礼貌一点，使用 <code>请</code> 和 <code>谢谢你的关注</code> 或者 <code>谢谢你的关照</code>，让别人明白你感谢他们无偿花时间帮助你。</p><p>坦率地讲，这一点没有语法正确、文字清晰、准确、有内容和避免使用专用格式重要（同时也不能替代它们）。黑客们一般宁可读有点唐突但技术鲜明的臭虫报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价它的）</p><p>然尔，如果你已经谈清楚了技术问题，客气一点肯定会增加你得到有用回复的机会。</p><p>（我们必须指出，本文唯一受到一些老黑客认真反对的地方是以前曾经推荐过的“提前谢了”，一些黑客认为这隐含着事后不用再感谢任何人的暗示。我们的建议是要么先说 <code>提前谢了</code>，事后 再 对回复者表示感谢，要么换种方式表达，譬如用 <code>谢谢你的关注</code> 或 <code>谢谢你的关照</code>）。</p><h4 id="问题解决后追加一条简要说明"><a href="#问题解决后追加一条简要说明" class="headerlink" title="问题解决后追加一条简要说明"></a>问题解决后追加一条简要说明</h4><p>问题解决后向所有帮助过的人追加一条消息，让他们知道问题是如何解决的并再次感谢。如果问题在邮件列表或新闻组中受到广泛关注，在那里追加此消息比较恰当。</p><p>最理想的方式是向最初提问的线索回复此消息，并在主题中包含 <code>已解决</code>、<code>已搞定</code> 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见线索 <code>问题 X</code> 和 <code>问题 X-已解决</code> 的潜在回复者就明白不用再浪费时间了（除非他个人觉得“问题 X”有趣），因此可以利用此时间去解决其它问题。</p><p>追加的消息用不着太长或太复杂，一句简单的“你好──是网线坏了！谢谢大家──比尔”就比什么都没有要强。事实上，除非解决问题的技术真正高深，一条简短而亲切的总结比长篇大论要好。说明是什么行动解决了问题，用不着重演整个排错的故事。</p><p>对于有深度的问题，张贴排错历史的摘要是恰当的。描述问题的最终状态，说明是什么解决了问题，在此之后 才指明可以避免的弯路。应避免的弯路部分应放在正确的解决方案和其它总结材料之后，而不要将此消息搞成侦探推理小说。列出那些帮助过你的名字，那样你会交到朋友的。</p><p>除了有礼貌、有内容以外，这种类型的追帖将帮助其他人在邮件列表、新闻组或论坛文档中搜索到真正解决你问题的方案，从而也让他们受益。</p><p>最后，此类追帖还让每位参与协助的人因问题的解决而产生一种满足感。如果你自己不是技术专家或黑客，相信我们，这种感觉对于你寻求帮助的老手和专家是非常重要的。问题叙述到最后不知所终总是令人沮丧的，黑客们痒痒地渴望它们被解决。<code>挠痒痒</code> 为你挣到的信誉将对你下次再次张贴提问非常非常的有帮助。</p><p>考虑一下怎样才能避免他人将来也遇到类似的问题，问问自己编一份文档或 FAQ 补丁会不会有帮助，如果是的话就将补丁发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼貌更重要，也是你善待他人而赢得声誉的方式，这是非常有价值的财富。</p><h3 id="如何解读回答"><a href="#如何解读回答" class="headerlink" title="如何解读回答"></a>如何解读回答</h3><h4 id="“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸"><a href="#“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸" class="headerlink" title="“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸"></a>“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸</h4><p>有一个古老而神圣的传统：如果你收到 <code>读读该死的手册</code>（RTFM） 的回复，发信人认为你应该去“读读该死的手册”。他或她多半是对的，去读一下吧。</p><p>“读读该死的手册”（RTFM）有个年轻一点的亲戚，如果你收到“搜搜该死的网络”（STFW）的回复，发信人认为你应该“搜搜该死的网络”。那人多半也是对的，去搜一下吧。(更温和一点的说法是“<a href="http://lmgtfy.com/" target="_blank" rel="noopener">谷歌是你的朋友！</a>”)</p><p>在论坛，你也可能被要求去搜索论坛的文档。事实上，有人甚至可能热心地为你提供以前解决此问题的线索。但不要依赖这种关照，提问前应该先搜索一下文档。</p><p>通常，叫你搜索的人已经打开了能解决你问题的手册或网页，正在一边看一边敲键盘。这些回复意味着他认为：</p><ul><li>第一，你要的信息很容易找到。</li><li>第二，自已找要比别人喂到嘴里能学得更多。</li></ul><p>你不应该觉得这样就被冒犯了，按黑客的标准，回复者没有不理你就是在向你表示某种尊敬，你反而应该感谢他热切地想帮助你。</p><h4 id="如果还不明白……"><a href="#如果还不明白……" class="headerlink" title="如果还不明白……"></a>如果还不明白……</h4><p>如果你看不懂回答，不要马上回复一个要求说明的消息，先试试那些最初提问时用过的相同工具（如手册、FAQ、网页、懂行的朋友等）试着搞懂回答。如果还是需要说明，展现你已经明白的。</p><p>譬如，假如我告诉你：“看起来象是某输入项有问题，你需要清除它”，接着是个 不好 的回帖：“什么是某输入项？”。而这是一个 很好 的跟帖：“是的，我读了手册，某某输入项只在 -z 和 -p 开关中被提到，但都没有涉及到如何清除它们，你指的是哪一个还是我弄错了什么？”</p><h4 id="对待无礼"><a href="#对待无礼" class="headerlink" title="对待无礼"></a>对待无礼</h4><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当、一针见血式的交流风格，这种风格对于更关注解决问题而不是使别人感觉舒服而混乱的人是很自然的。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了过格的事，邮件列表、新闻组或论坛中的前辈多半会招呼他。如果这 没有 发生而你却光火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而 你 将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你会偶而真的碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击、用犀利的语言将其驳得体无完肤都是可以接受的。然尔，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外来者，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或阿斯伯格综合症，缺少用于润滑人类社会“正常”交往所需的脑电路。这既可能是真也可能是假。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们 喜欢 现在这个样子，并且一般都对病号标记有站得住脚的怀疑。）</p><p>在下一节，我们会谈到另一个问题，当 你 行为不当时会受到的“冒犯”。</p><h3 id="别象失败者那样反应"><a href="#别象失败者那样反应" class="headerlink" title="别象失败者那样反应"></a>别象失败者那样反应</h3><p>在黑客社区的论坛中有那么几次你可能会搞砸──以本文描述或类似的方式。你会被示众是如何搞砸的，也许言语中还会带点颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反，你该这样去做：</p><p>熬过去，这很正常。事实上，它是有益健康与恰当的。</p><p>社区的标准不会自己维持，它们是通过参与者积极而 公开 地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，这不是事情运作的方式。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称“如果你不想帮助用户就闭嘴”。有思路的参与者纷纷离开的结果只会使它们变成了毫无意义的唠叨与无用的技术论坛。</p><p>是夸张的“友谊”（以上述方式）还是有用？挑一个。</p><p>记着：当黑客说你搞砸了，并且(无论多么刺耳地)告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤除要容易得多。如果你无法做到感谢，至少要有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人象对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是别人想象你搞砸了）， 有些人也会无缘无故地攻击你本人。在这种情况下，报怨倒是 真的 会把问题搞砸。</p><p>这些找茬者要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些找茬者在给自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，大多数口水战最好不要理睬──当然，是在你核实它们只是口水战、没有指出你搞砸的地方，而且没有巧妙地将问题真正的答案藏于其中之后（这也是可能的）。</p><h3 id="提问禁忌"><a href="#提问禁忌" class="headerlink" title="提问禁忌"></a>提问禁忌</h3><p>下面是些典型的愚蠢问题和黑客不回答它们时的想法。</p><p>问：我到哪可以找到某程序或 X 资源？</p><p>问：我怎样用 X 做 Y？</p><p>问：如何配置我的 shell 提示？</p><p>问：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？</p><p>问：我的{程序、配置、SQL 语句}不运行了</p><p>问：我的视窗电脑出问题了，你能帮忙吗？</p><p>问：我的程序不运行了，我认为系统工具X有问题</p><p>问：我安装 Linux 或 X 遇到困难，你能帮忙吗？</p><p>问：我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？</p><hr><p>问：    </p><blockquote><p>我到哪可以找到某程序或 X 资源？</p></blockquote><p>答：    </p><blockquote><p>在我找到它的同样地方，笨旦──在网页搜索引擎上。上帝啊，难道还有人不知道如何使用 谷歌 吗？</p></blockquote><p>问：    </p><blockquote><p>我怎样用 X 做 Y？</p></blockquote><p>答：    </p><blockquote><p>如果你想解决的是 Y，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对要解决的 Y 问题糊涂，还被特定形势禁锢了思维。等他们把问题弄好再说。</p></blockquote><p>问：    </p><blockquote><p>如何配置我的 shell 提示？</p></blockquote><p>答：    </p><blockquote><p>如果你有足够的智慧提这个问题，你也该有足够的智慧去 “读读该死的手册”（RTFM），然后自己去找出来。</p></blockquote><p>问：    </p><blockquote><p>我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？</p></blockquote><p>答：    </p><blockquote><p>试试就知道了。如果你试过，你既知道了答案，又不用浪费我的时间了。</p></blockquote><p>问：    </p><blockquote><p>我的{程序、配置、SQL 语句}不运行了</p></blockquote><p>答：    </p><blockquote><p>这不是一个问题，我也没有兴趣去猜你有什么问题──我有更要紧的事要做。看到这种东西，我的反应一般如下：</p></blockquote><ul><li>你还有什么补充吗？</li><li>噢，太糟了，希望你能搞定。</li><li><p>这跟我究竟有什么关系？</p><p>  ：    </p><blockquote><p>我的视窗电脑出问题了，你能帮忙吗？</p></blockquote></li></ul><p>答：    </p><blockquote><p>是的，把视窗垃圾删了，装个象 Linux 或 BSD 的开源操作系统吧。</p></blockquote><p>注意：如果程序有官方的视窗版或者与视窗有交互(如 Samba)，你 可以 问与视窗相关的问题，只是别对问题是由视窗操作系统而不是程序本身造成的回复感到惊讶，因为视窗一般来说太差，这种说法一般都成立。</p><p>问：    </p><blockquote><p>我的程序不运行了，我认为系统工具 X 有问题</p></blockquote><p>答：    </p><blockquote><p>你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文档作后盾。</p></blockquote><p>问：    </p><blockquote><p>我安装 Linux 或 X 遇到困难，你能帮忙吗？</p></blockquote><p>答：    </p><blockquote><p>不行，我需要亲手操作你的电脑才能帮你排错，去向当地的 Linux 用户组寻求方便的帮助（你可以在 这里 找到用户组列表）</p></blockquote><p>注意：如果安装问题与某 Linux 发行版有关，在针对 它 的邮件列表、论坛或本地用户组织中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 “linux”和 所有 被怀疑的硬件 [作关键词] 仔细搜索。</p><p>问：    </p><blockquote><p>我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？</p></blockquote><p>答：    </p><blockquote><p>想做这种事情说明你是个卑劣的家伙，想让黑客教你做这种事情说明你是个白痴。</p></blockquote><h4 id="好问题与坏问题"><a href="#好问题与坏问题" class="headerlink" title="好问题与坏问题"></a>好问题与坏问题</h4><p>最后，我将通过举例来演示提问的智慧。同样的问题两种提法，一种愚蠢，另一种明智。</p><p>愚蠢：我在哪能找到关于 Foonly Flurbamatic 设备的东西？</p><blockquote><p>这个问题在乞求得到 “搜搜该死的网络”（STFW） 式的回复。</p></blockquote><p>明智： 我用谷歌搜索过“Foonly Flurbamatic 2600”，但没有找到什么有用的，有谁知道在哪能找到这种设备的编程信息？</p><blockquote><p>这个人已经搜索过网络了，而且听起来他可能真的遇到了问题。</p></blockquote><p>愚蠢： 我不能编译某项目的源代码，它为什么这么破？</p><blockquote><p>提问者假设是别人搞砸了，太自大了。</p></blockquote><p>明智： 某项目的源代码不能在某 Linux 6.2 版下编译。我读了常见问题文档，但其中没有与某 Linux 相关的内容。这是编译时的记录，我做错了什么吗？</p><blockquote><p>提问者已经指明了运行环境，读了常见问题文档（FAQ），列出了错误，也没有假设问题是别人的过错，这家伙值得注意。</p></blockquote><p>愚蠢： 我的主板有问题，谁能帮我？</p><blockquote><p>某黑客对此的反应可能是：“是的，还需要帮你拍背和换尿布吗？”，然后是敲下删除键。</p></blockquote><p>明智： 我在 S2464 主板上试过 X、Y 和 Z，当它们都失败后，又试了 A、B 和 C。注意我试 C 时的奇怪症状，显然某某东西正在做某某事情，这不是期望的行为。通常在 Athlon MP 主板上导致某某事情的原因是什么？有谁知道我还能再试点什么以确定问题？</p><blockquote><p>相反地，这个人看来值得回答。他或她展现了解决问题的能力而不是坐等天上掉馅饼。</p></blockquote><p>在最后那个问题中，注意“给我一个回答”与“请帮我看看我还能再做点什么测试以得到启发”之间细微但重要的差别。</p><p>事实上，最后那个问题基本上源于 2001 年 8 月 Linux 内核邮件列表（lkml）上的真实事件，是我（Eric）当时提了那个问题，我发现 Tyan S2462 主板有神秘的死机现象，邮件列表成员给我提供了解决此问题的关键信息。</p><p>通过这种提问方式，我给了别人可以咀嚼玩味的东西。我设法使之对参与者既轻松又有吸引力，也表明了对同行能力的尊敬并邀请他们与我一起协商。通过告诉他们我已经走过的弯路，我还表明了对他们宝贵时间的尊重。</p><p>事后，当我感谢大家并评论这次良好的经历时，一个 Linux 内核邮件列表的成员谈到，他认为我得到答案并不是因为我的名字挂在列表上，而只是因为我正确的提问方式。</p><p>黑客们在某种方面是非常不留情面的精英分子。我想在这事上他是对的，如果我 表现得 象个不劳而获的寄生虫，不管我是谁都会被忽略或斥责。他建议将整个事件作为对其它人提问的指导，这直接导致了本文的编写。</p><h3 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h3><p>如果得不到回答，请不要认为我们不想帮你，有时只是因为被问到的小组成员的确不知道答案。没有回复不等于不被理睬，当然必须承认从外面很难看出两者的差别。</p><p>一般而言，直接将问题再张贴一次不好，这会被视为毫无意义的骚扰。耐心一点，知道你问题答案的人可能生活在不同的时区，有可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>还有其它资源可以寻求帮助，通常是在一些面向新手的资源中。</p><p>有许多在线与本地的用户组织，虽然它们自己不编写任何软件，但是对软件很热心。这些用户组通常因互助和帮助新手而形成。</p><p>还有众多大小商业公司提供签约支持服务，别因为要付点钱才有支持就感到沮丧！毕竟，如果你车子的汽缸垫烧了，你多半还得花钱找个修理店把它弄好。即使软件没花你一分钱，你总不能指望服务支持都是免费的。</p><p>象 Linux 这样流行的软件，每个开发者至少有一万个以上的用户，一个人不可能应付这么多用户的服务要求。记住，即使你必须付费才能得到支持，也比你还得额外花钱买软件要少得多（而且对封闭源代码软件的服务支持与开源软件相比通常还要贵一点，也要差一点）。</p><h3 id="如何更好地回答"><a href="#如何更好地回答" class="headerlink" title="如何更好地回答"></a>如何更好地回答</h3><p>态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p>对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 FAQ 都不知道。</p><p>如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来象个专家好玩就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p>如果帮不了忙，别妨碍。 不要在具体步骤上开玩笑，那样也许会毁了用户的安装──有些可怜的呆瓜会把它当成真的指令。</p><p>探索性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西──你也可以。试试将很差的问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫报怨一声“读读该死的手册”（RTFM）是正当的，指出文档的位置（即使只是建议做个谷歌关键词搜索）会更好</p><p>如果你决意回答，给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计，应推荐更好的工具，重新组织问题。</p><p>请回答真正的问题！如果提问者已经做了自己该做的研究，并且说明尝试过<code>X，Y，Z，A，B 与 C</code> 都没有得到想要的結果，那么回复 <code>试试 A 或 B</code> 或者给出一个内容为 <code>试一下 X，Y，Z，A，B 或 C</code> 的链接将极其无益！</p><p>帮助你的社区从中学习。当回复一个好问题时，问问自己 <code>如何修改相关文件或 FAQ 文档以免再次解答同样的问题？</code>，接着再向文档维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟“授人以鱼，不如授人以渔”。</p><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><p>如果需要个人电脑、Unix 和互联网如何工作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/" target="_blank" rel="noopener">Unix 和互联网工作的基本原理</a>。</p><p>当你发布软件或补丁时，试着按 <a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html" target="_blank" rel="noopener">软件发布实践</a> 操作。</p><h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p>伊夫林.米切尔（Evelyn Mitchell）贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节，米哈伊尔.罗门迪克（Mikhail Ramendik）贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;艾瑞克-史蒂文-雷蒙德（Eric-Steven-Raymond）&quot;&gt;&lt;a href=&quot;#艾瑞克-史蒂文-雷蒙德（Eric-Steven-Raymond）&quot; class=&quot;headerlink&quot; title=&quot;艾瑞克.史蒂文.雷蒙德（Eric Steven Raym
      
    
    </summary>
    
    
      <category term="Compass" scheme="https://m12r3dx.github.io/tags/Compass/"/>
    
  </entry>
  
</feed>
